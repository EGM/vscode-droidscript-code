{   "methods": [
    {
        "name": "AddButton",
        "kind": "Method",
        "detail": "AddButton: (layout: appobject, text: string, width: number, height: number, options: string)",
        "doc": "Creates and adds a Button to a Layout.",
        "param": "\n*@param* {appobject} `layout` - CreateLayout\n\n*@param* {string} `text` - CreateLayout\n\n*@param* {number} `width` - Number fraction (0..1)\n\n*@param* {number} `height` - Number fraction (0..1)\n\n*@param* {string} `options` - String comma “,” separated FontAwesome,Html,Monospace,Normal|Aluminium|Gray|Lego,SingleLine,Custom,NoPad,FillX/Y,NoSound\n",
        "params": [{"name":"layout: appobject","desc":"CreateLayout","type":"appobject"},{"name":"text: string","desc":"CreateLayout","type":"string"},{"name":"width: number","desc":"Number fraction (0..1)","type":"number"},{"name":"height: number","desc":"Number fraction (0..1)","type":"number"},{"name":"options: string","desc":"String comma “,” separated FontAwesome,Html,Monospace,Normal|Aluminium|Gray|Lego,SingleLine,Custom,NoPad,FillX/Y,NoSound","type":"string"}],
        "call": "app.AddButton(layout: appobject, text: string, width: number, height: number, options: string)"
    },
    {
        "name": "AddCameraView",
        "kind": "Method",
        "detail": "AddCameraView: (layout: appobject, width: number, height: number, options: string)",
        "doc": "Creates and adds a CameraView to a Layout.",
        "param": "\n*@param* {appobject} `layout` - CreateLayout\n\n*@param* {number} `width` - Number fraction (0..1)\n\n*@param* {number} `height` - Number fraction (0..1)\n\n*@param* {string} `options` - String comma “,” separated Front,UseBitmap,UseABGR,NoRotate,\"&lt;resolution&gt;\":\"CIF: 352x288\\nQQVGA: 160x120\\nQVGA: 320x240\\nSVGA: 800x600\\nVGA: 640x480\\nXGA: 1024x768\\nUXGA: 1600x1200\"\n",
        "params": [{"name":"layout: appobject","desc":"CreateLayout","type":"appobject"},{"name":"width: number","desc":"Number fraction (0..1)","type":"number"},{"name":"height: number","desc":"Number fraction (0..1)","type":"number"},{"name":"options: string","desc":"String comma “,” separated Front,UseBitmap,UseABGR,NoRotate,\\\"&lt;resolution&gt;\\\":\\\"CIF: 352x288\\\\nQQVGA: 160x120\\\\nQVGA: 320x240\\\\nSVGA: 800x600\\\\nVGA: 640x480\\\\nXGA: 1024x768\\\\nUXGA: 1600x1200\\\"","type":"string"}],
        "call": "app.AddCameraView(layout: appobject, width: number, height: number, options: string)"
    },
    {
        "name": "AddCanvas",
        "kind": "Method",
        "detail": "AddCanvas: ()",
        "doc": "Creates and adds a blank white [Image](CreateImage.htm) with the AutoUpdate feature turned off to a Layout",
        "param": "",
        "params": [],
        "call": "app.AddCanvas()"
    },
    {
        "name": "AddCheckBox",
        "kind": "Method",
        "detail": "AddCheckBox: (layout: appobject, text: string, width: number, height: number, options: string)",
        "doc": "Creates and adds a CheckBox to a Layout.",
        "param": "\n*@param* {appobject} `layout` - CreateLayout\n\n*@param* {string} `text` - CreateLayout\n\n*@param* {number} `width` - Number fraction (0..1)\n\n*@param* {number} `height` - Number fraction (0..1)\n\n*@param* {string} `options` - String comma “,” separated FillX/Y,NoSound\n",
        "params": [{"name":"layout: appobject","desc":"CreateLayout","type":"appobject"},{"name":"text: string","desc":"CreateLayout","type":"string"},{"name":"width: number","desc":"Number fraction (0..1)","type":"number"},{"name":"height: number","desc":"Number fraction (0..1)","type":"number"},{"name":"options: string","desc":"String comma “,” separated FillX/Y,NoSound","type":"string"}],
        "call": "app.AddCheckBox(layout: appobject, text: string, width: number, height: number, options: string)"
    },
    {
        "name": "AddCodeEdit",
        "kind": "Method",
        "detail": "AddCodeEdit: (layout: appobject, text: string, width: number, height: number, options: string)",
        "doc": "Creates and adds a CodeEdit to a Layout.",
        "param": "\n*@param* {appobject} `layout` - CreateLayout\n\n*@param* {string} `text` - CreateLayout\n\n*@param* {number} `width` - Number fraction (0..1)\n\n*@param* {number} `height` - Number fraction (0..1)\n\n*@param* {string} `options` - String comma “,” separated FillX/Y\n",
        "params": [{"name":"layout: appobject","desc":"CreateLayout","type":"appobject"},{"name":"text: string","desc":"CreateLayout","type":"string"},{"name":"width: number","desc":"Number fraction (0..1)","type":"number"},{"name":"height: number","desc":"Number fraction (0..1)","type":"number"},{"name":"options: string","desc":"String comma “,” separated FillX/Y","type":"string"}],
        "call": "app.AddCodeEdit(layout: appobject, text: string, width: number, height: number, options: string)"
    },
    {
        "name": "AddDrawer",
        "kind": "Method",
        "detail": "AddDrawer: (layout: appobject, side: string, width: number, grabWidth: number)",
        "doc": "AddDrawer adds layout as drawer on a given side. If the user swipes from this side to the other the layout will slide out.",
        "param": "\n*@param* {appobject} `layout` - CreateLayout\n\n*@param* {string} `side` - left|right\n\n*@param* {number} `width` - Number fraction (0..1)\n\n*@param* {number} `grabWidth` - Number fraction (0..1)\n",
        "params": [{"name":"layout: appobject","desc":"CreateLayout","type":"appobject"},{"name":"side: string","desc":"left|right","type":"string"},{"name":"width: number","desc":"Number fraction (0..1)","type":"number"},{"name":"grabWidth: number","desc":"Number fraction (0..1)","type":"number"}],
        "call": "app.AddDrawer(layout: appobject, side: string, width: number, grabWidth: number)"
    },
    {
        "name": "AddImage",
        "kind": "Method",
        "detail": "AddImage: (layout: appobject, file: string, width: number, height: number, options: string, pxw: number, pxh: number)",
        "doc": "Creates and adds a Image to a Layout.",
        "param": "\n*@param* {appobject} `layout` - CreateLayout\n\n*@param* {string} `file` - String path to file ( “/absolute/...” or “relative/...” )\n\n*@param* {number} `width` - String path to file ( “/absolute/...” or “relative/...” )\n\n*@param* {number} `height` - String path to file ( “/absolute/...” or “relative/...” )\n\n*@param* {string} `options` - String comma “,” separated fix,alias,px:use pixel values for size,Button:causes image to depress like a button when touched,ScaleCenter,async:loads the image asynchronously,FontAwesome,Resize,TouchThrough,Icon:allows loading of app icons,wallpaper,NoPlay:prevent gifs from playing automatically\n\n*@param* {number} `pxw` - Number pixel\n\n*@param* {number} `pxh` - Number pixel\n",
        "params": [{"name":"layout: appobject","desc":"CreateLayout","type":"appobject"},{"name":"file: string","desc":"String path to file ( “/absolute/...” or “relative/...” )","type":"string"},{"name":"width: number","desc":"String path to file ( “/absolute/...” or “relative/...” )","type":"number"},{"name":"height: number","desc":"String path to file ( “/absolute/...” or “relative/...” )","type":"number"},{"name":"options: string","desc":"String comma “,” separated fix,alias,px:use pixel values for size,Button:causes image to depress like a button when touched,ScaleCenter,async:loads the image asynchronously,FontAwesome,Resize,TouchThrough,Icon:allows loading of app icons,wallpaper,NoPlay:prevent gifs from playing automatically","type":"string"},{"name":"pxw: number","desc":"Number pixel","type":"number"},{"name":"pxh: number","desc":"Number pixel","type":"number"}],
        "call": "app.AddImage(layout: appobject, file: string, width: number, height: number, options: string, pxw: number, pxh: number)"
    },
    {
        "name": "AddLayout",
        "kind": "Method",
        "detail": "AddLayout: (layout: appobject, type: string, options: string)",
        "doc": "AddLayout adds a layout to the screen so that it is visible (if not hidden with SetVisibility)",
        "param": "\n*@param* {appobject} `layout` - CreateLayout\n\n*@param* {string} `type` - Linear|Absolute|Frame|Card\n\n*@param* {string} `options` - TouchThrough:forwards touch events to underlying children,TouchSpy:spies for touch events on all children,Left|Top|Right|Bottom|Center|H/VCenter,Wrap,Horizontal|Vertical,FillX/Y\n",
        "params": [{"name":"layout: appobject","desc":"CreateLayout","type":"appobject"},{"name":"type: string","desc":"Linear|Absolute|Frame|Card","type":"string"},{"name":"options: string","desc":"TouchThrough:forwards touch events to underlying children,TouchSpy:spies for touch events on all children,Left|Top|Right|Bottom|Center|H/VCenter,Wrap,Horizontal|Vertical,FillX/Y","type":"string"}],
        "call": "app.AddLayout(layout: appobject, type: string, options: string)"
    },
    {
        "name": "AddList",
        "kind": "Method",
        "detail": "AddList: (layout: appobject, list: string, width: number, height: number, options: string, delim: string)",
        "doc": "Creates and adds a List to a Layout.",
        "param": "\n*@param* {appobject} `layout` - CreateLayout\n\n*@param* {string} `list` - String separated\n\n*@param* {number} `width` - Number fraction (0..1)\n\n*@param* {number} `height` - Number fraction (0..1)\n\n*@param* {string} `options` - String comma “,” separated bold:bold item titles|Expand:Expand list to full height inside scrollers,Menu:applies various settings to make the list appear like an in-app menu,Horiz:makes title and body text flow horizontally,html,FontAwesome,monospace,Normal,WhiteGrad|BlackGrad|AlumButton|GreenButton|OrangeButton,NoSound\n\n*@param* {string} `delim` - String comma “,” separated bold:bold item titles|Expand:Expand list to full height inside scrollers,Menu:applies various settings to make the list appear like an in-app menu,Horiz:makes title and body text flow horizontally,html,FontAwesome,monospace,Normal,WhiteGrad|BlackGrad|AlumButton|GreenButton|OrangeButton,NoSound\n",
        "params": [{"name":"layout: appobject","desc":"CreateLayout","type":"appobject"},{"name":"list: string","desc":"String separated","type":"string"},{"name":"width: number","desc":"Number fraction (0..1)","type":"number"},{"name":"height: number","desc":"Number fraction (0..1)","type":"number"},{"name":"options: string","desc":"String comma “,” separated bold:bold item titles|Expand:Expand list to full height inside scrollers,Menu:applies various settings to make the list appear like an in-app menu,Horiz:makes title and body text flow horizontally,html,FontAwesome,monospace,Normal,WhiteGrad|BlackGrad|AlumButton|GreenButton|OrangeButton,NoSound","type":"string"},{"name":"delim: string","desc":"String comma “,” separated bold:bold item titles|Expand:Expand list to full height inside scrollers,Menu:applies various settings to make the list appear like an in-app menu,Horiz:makes title and body text flow horizontally,html,FontAwesome,monospace,Normal,WhiteGrad|BlackGrad|AlumButton|GreenButton|OrangeButton,NoSound","type":"string"}],
        "call": "app.AddList(layout: appobject, list: string, width: number, height: number, options: string, delim: string)"
    },
    {
        "name": "AddScroller",
        "kind": "Method",
        "detail": "AddScroller: (layout: appobject, width: number, height: number, options: string)",
        "doc": "Creates and adds a Scroller to a Layout.",
        "param": "\n*@param* {appobject} `layout` - CreateLayout\n\n*@param* {number} `width` - Number fraction (0..1)\n\n*@param* {number} `height` - Number fraction (0..1)\n\n*@param* {string} `options` - String comma “,” separated FillX|FillY|FillXY,Horizontal|Vertical,NoScrollBar,ScrollFade\n",
        "params": [{"name":"layout: appobject","desc":"CreateLayout","type":"appobject"},{"name":"width: number","desc":"Number fraction (0..1)","type":"number"},{"name":"height: number","desc":"Number fraction (0..1)","type":"number"},{"name":"options: string","desc":"String comma “,” separated FillX|FillY|FillXY,Horizontal|Vertical,NoScrollBar,ScrollFade","type":"string"}],
        "call": "app.AddScroller(layout: appobject, width: number, height: number, options: string)"
    },
    {
        "name": "AddSeekBar",
        "kind": "Method",
        "detail": "AddSeekBar: (layout: appobject, width: number, height: number, options: string)",
        "doc": "Creates and adds a SeekBar to a Layout.",
        "param": "\n*@param* {appobject} `layout` - CreateLayout\n\n*@param* {number} `width` - Number fraction (0..1)\n\n*@param* {number} `height` - Number fraction (0..1)\n\n*@param* {string} `options` - String comma “,” separated FillX/Y\n",
        "params": [{"name":"layout: appobject","desc":"CreateLayout","type":"appobject"},{"name":"width: number","desc":"Number fraction (0..1)","type":"number"},{"name":"height: number","desc":"Number fraction (0..1)","type":"number"},{"name":"options: string","desc":"String comma “,” separated FillX/Y","type":"string"}],
        "call": "app.AddSeekBar(layout: appobject, width: number, height: number, options: string)"
    },
    {
        "name": "AddSpinner",
        "kind": "Method",
        "detail": "AddSpinner: (layout: appobject, list: string, width: number, height: number, options: string)",
        "doc": "Creates and adds a Spinner to a Layout.",
        "param": "\n*@param* {appobject} `layout` - CreateLayout\n\n*@param* {string} `list` - String comma “,” separated\n\n*@param* {number} `width` - Number fraction (0..1)\n\n*@param* {number} `height` - Number fraction (0..1)\n\n*@param* {string} `options` - String comma “,” separated FillX/Y,NoSound\n",
        "params": [{"name":"layout: appobject","desc":"CreateLayout","type":"appobject"},{"name":"list: string","desc":"String comma “,” separated","type":"string"},{"name":"width: number","desc":"Number fraction (0..1)","type":"number"},{"name":"height: number","desc":"Number fraction (0..1)","type":"number"},{"name":"options: string","desc":"String comma “,” separated FillX/Y,NoSound","type":"string"}],
        "call": "app.AddSpinner(layout: appobject, list: string, width: number, height: number, options: string)"
    },
    {
        "name": "AddSwitch",
        "kind": "Method",
        "detail": "AddSwitch: (layout: appobject, text: string, width: number, height: number, options: string)",
        "doc": "Creates and adds a Switch toggle to a Layout.",
        "param": "\n*@param* {appobject} `layout` - CreateLayout\n\n*@param* {string} `text` - CreateLayout\n\n*@param* {number} `width` - Number fraction (0..1)\n\n*@param* {number} `height` - Number fraction (0..1)\n\n*@param* {string} `options` - String comma “,” separated Monospace,Custom,NoPad,FillX/Y,NoSound\n",
        "params": [{"name":"layout: appobject","desc":"CreateLayout","type":"appobject"},{"name":"text: string","desc":"CreateLayout","type":"string"},{"name":"width: number","desc":"Number fraction (0..1)","type":"number"},{"name":"height: number","desc":"Number fraction (0..1)","type":"number"},{"name":"options: string","desc":"String comma “,” separated Monospace,Custom,NoPad,FillX/Y,NoSound","type":"string"}],
        "call": "app.AddSwitch(layout: appobject, text: string, width: number, height: number, options: string)"
    },
    {
        "name": "AddText",
        "kind": "Method",
        "detail": "AddText: (layout: appobject, text: string, width: number, height: number, options: string)",
        "doc": "Creates and adds a Text to a Layout.",
        "param": "\n*@param* {appobject} `layout` - CreateLayout\n\n*@param* {string} `text` - CreateLayout\n\n*@param* {number} `width` - Number fraction (0..1)\n\n*@param* {number} `height` - Number fraction (0..1)\n\n*@param* {string} `options` - String comma “,” separated AutoScale,AutoSize,Multiline,Left|Right,Html,Bold,Monospace,NoWrap,Log,FillX/Y\n",
        "params": [{"name":"layout: appobject","desc":"CreateLayout","type":"appobject"},{"name":"text: string","desc":"CreateLayout","type":"string"},{"name":"width: number","desc":"Number fraction (0..1)","type":"number"},{"name":"height: number","desc":"Number fraction (0..1)","type":"number"},{"name":"options: string","desc":"String comma “,” separated AutoScale,AutoSize,Multiline,Left|Right,Html,Bold,Monospace,NoWrap,Log,FillX/Y","type":"string"}],
        "call": "app.AddText(layout: appobject, text: string, width: number, height: number, options: string)"
    },
    {
        "name": "AddTextEdit",
        "kind": "Method",
        "detail": "AddTextEdit: (layout: appobject, text: string, width: number, height: number, options: string)",
        "doc": "Creates and adds a TextEdit to a Layout.",
        "param": "\n*@param* {appobject} `layout` - CreateLayout\n\n*@param* {string} `text` - CreateLayout\n\n*@param* {number} `width` - Number fraction (0..1)\n\n*@param* {number} `height` - Number fraction (0..1)\n\n*@param* {string} `options` - String comma “,” separated AutoSelect:Select all Text if user enter the Textedit,AutoSize:Expand or shrink the control automatically so the text fits in the Textedit,Bold:Write bold text,Extract:enables full screen keyboard in landscape mode,Left:Justify the text to the left|Center:Justify the text in the middle|Right:Justify the text to the right|Monospace,NoSpell:Disable the spell-checker,NoKeyboard:Shows no Keyboard|Numbers,ReadOnly:The user cant change the Text,SingleLine:Dont break text for long lines and change 'Enter' key to 'Done',FillX/Y,Password:displays characters as dots\n",
        "params": [{"name":"layout: appobject","desc":"CreateLayout","type":"appobject"},{"name":"text: string","desc":"CreateLayout","type":"string"},{"name":"width: number","desc":"Number fraction (0..1)","type":"number"},{"name":"height: number","desc":"Number fraction (0..1)","type":"number"},{"name":"options: string","desc":"String comma “,” separated AutoSelect:Select all Text if user enter the Textedit,AutoSize:Expand or shrink the control automatically so the text fits in the Textedit,Bold:Write bold text,Extract:enables full screen keyboard in landscape mode,Left:Justify the text to the left|Center:Justify the text in the middle|Right:Justify the text to the right|Monospace,NoSpell:Disable the spell-checker,NoKeyboard:Shows no Keyboard|Numbers,ReadOnly:The user cant change the Text,SingleLine:Dont break text for long lines and change 'Enter' key to 'Done',FillX/Y,Password:displays characters as dots","type":"string"}],
        "call": "app.AddTextEdit(layout: appobject, text: string, width: number, height: number, options: string)"
    },
    {
        "name": "AddToggle",
        "kind": "Method",
        "detail": "AddToggle: (layout: appobject, text: string, width: number, height: number, options: string)",
        "doc": "Creates and adds a Toggle to a Layout.",
        "param": "\n*@param* {appobject} `layout` - CreateLayout\n\n*@param* {string} `text` - CreateLayout\n\n*@param* {number} `width` - Number fraction (0..1)\n\n*@param* {number} `height` - Number fraction (0..1)\n\n*@param* {string} `options` - String comma “,” separated Monospace,Custom,NoPad,FillX/Y,NoSound\n",
        "params": [{"name":"layout: appobject","desc":"CreateLayout","type":"appobject"},{"name":"text: string","desc":"CreateLayout","type":"string"},{"name":"width: number","desc":"Number fraction (0..1)","type":"number"},{"name":"height: number","desc":"Number fraction (0..1)","type":"number"},{"name":"options: string","desc":"String comma “,” separated Monospace,Custom,NoPad,FillX/Y,NoSound","type":"string"}],
        "call": "app.AddToggle(layout: appobject, text: string, width: number, height: number, options: string)"
    },
    {
        "name": "AddVideoView",
        "kind": "Method",
        "detail": "AddVideoView: (layout: appobject, width: number, height: number, options: string)",
        "doc": "Creates and adds a VideoView to a Layout.",
        "param": "\n*@param* {appobject} `layout` - CreateLayout\n\n*@param* {number} `width` - Number fraction (0..1)\n\n*@param* {number} `height` - Number fraction (0..1)\n\n*@param* {string} `options` - String comma “,” separated\n",
        "params": [{"name":"layout: appobject","desc":"CreateLayout","type":"appobject"},{"name":"width: number","desc":"Number fraction (0..1)","type":"number"},{"name":"height: number","desc":"Number fraction (0..1)","type":"number"},{"name":"options: string","desc":"String comma “,” separated","type":"string"}],
        "call": "app.AddVideoView(layout: appobject, width: number, height: number, options: string)"
    },
    {
        "name": "AddWebView",
        "kind": "Method",
        "detail": "AddWebView: (layout: appobject, width: number, height: number, options: string, zoom: number)",
        "doc": "Creates and adds a WebView to a Layout.",
        "param": "\n*@param* {appobject} `layout` - CreateLayout\n\n*@param* {number} `width` - Number fraction (0..1)\n\n*@param* {number} `height` - Number fraction (0..1)\n\n*@param* {string} `options` - String comma “,” separated AllowZoom:Allows the user to zoom the page,AutoZoom,Wide:\"force page using “wide” viewport\",FillX/Y,NoActionBar:prevents copy/paste popup,IgnoreErrors,IgnoreSSLErrors,NoApp:prevent app&period;* calls,NoCapture:Disable camera,NoLocate:Disable location sensor,NoLongTouch,NoPause:Dont pause WebView when app in background,NoScrollBars,Overview:Zoom to full width of page,Progress:Shows a progress indicator when loading,ScrollFade,UseBasicInput:makes softkeyboard useful for html code editors,UseBrowser:Open links in external browser\n\n*@param* {number} `zoom` - Number percent\n",
        "params": [{"name":"layout: appobject","desc":"CreateLayout","type":"appobject"},{"name":"width: number","desc":"Number fraction (0..1)","type":"number"},{"name":"height: number","desc":"Number fraction (0..1)","type":"number"},{"name":"options: string","desc":"String comma “,” separated AllowZoom:Allows the user to zoom the page,AutoZoom,Wide:\\\"force page using “wide” viewport\\\",FillX/Y,NoActionBar:prevents copy/paste popup,IgnoreErrors,IgnoreSSLErrors,NoApp:prevent app&period;* calls,NoCapture:Disable camera,NoLocate:Disable location sensor,NoLongTouch,NoPause:Dont pause WebView when app in background,NoScrollBars,Overview:Zoom to full width of page,Progress:Shows a progress indicator when loading,ScrollFade,UseBasicInput:makes softkeyboard useful for html code editors,UseBrowser:Open links in external browser","type":"string"},{"name":"zoom: number","desc":"Number percent","type":"number"}],
        "call": "app.AddWebView(layout: appobject, width: number, height: number, options: string, zoom: number)"
    },
    {
        "name": "Alert",
        "kind": "Method",
        "detail": "Alert: (message: string, title: string, options: string, hue: number)",
        "doc": "Alert shows a simple text dialog with a colored title and a 'Ok' button to exit. If title was not given the dialog looks like a normal alert box",
        "param": "\n*@param* {string} `message` - \n\n*@param* {string} `title` - \n\n*@param* {string} `options` - String comma “,” separated NoDim,NoFocus\n\n*@param* {number} `hue` - Number integer -180..180\n",
        "params": [{"name":"message: string","desc":"","type":"string"},{"name":"title: string","desc":"","type":"string"},{"name":"options: string","desc":"String comma “,” separated NoDim,NoFocus","type":"string"},{"name":"hue: number","desc":"Number integer -180..180","type":"number"}],
        "call": "app.Alert(message: string, title: string, options: string, hue: number)"
    },
    {
        "name": "Animate",
        "kind": "Method",
        "detail": "Animate: (callback: function, fps: number)",
        "doc": "Animate calls a function repeatedly like setInterval() but with the current time (Date.getTime()) and the difference to the last call in milliseconds as parameter",
        "param": "\n*@param* {function} `callback` - \n\n*@param* {number} `fps` - Number frames per second\n",
        "params": [{"name":"callback: function","desc":"","type":"function"},{"name":"fps: number","desc":"Number frames per second","type":"number"}],
        "call": "app.Animate(callback: function, fps: number)"
    },
    {
        "name": "Broadcast",
        "kind": "Method",
        "detail": "Broadcast: (type: string, message: string)",
        "doc": "Broadcast is used for broadcasting messages between DroidScript apps.",
        "param": "\n*@param* {string} `type` - Exec\n\n*@param* {string} `message` - Exec\n",
        "params": [{"name":"type: string","desc":"Exec","type":"string"},{"name":"message: string","desc":"Exec","type":"string"}],
        "call": "app.Broadcast(type: string, message: string)"
    },
    {
        "name": "BroadcastIntent",
        "kind": "Method",
        "detail": "BroadcastIntent: (action: string, category: string, data: string, type: string, extras: string, options: string)",
        "doc": "Send a broadcasting intent with a custom action",
        "param": "\n*@param* {string} `action` - android action\n\n*@param* {string} `category` - android action\n\n*@param* {string} `data` - android action\n\n*@param* {string} `type` - android action\n\n*@param* {string} `extras` - android action\n\n*@param* {string} `options` - String comma “,” separated\n",
        "params": [{"name":"action: string","desc":"android action","type":"string"},{"name":"category: string","desc":"android action","type":"string"},{"name":"data: string","desc":"android action","type":"string"},{"name":"type: string","desc":"android action","type":"string"},{"name":"extras: string","desc":"android action","type":"string"},{"name":"options: string","desc":"String comma “,” separated","type":"string"}],
        "call": "app.BroadcastIntent(action: string, category: string, data: string, type: string, extras: string, options: string)"
    },
    {
        "name": "Call",
        "kind": "Method",
        "detail": "Call: (number: string)",
        "doc": "Call is used to call the given phone number",
        "param": "\n*@param* {string} `number` - number\n",
        "params": [{"name":"number: string","desc":"number","type":"string"}],
        "call": "app.Call(number: string)"
    },
    {
        "name": "CancelJob",
        "kind": "Method",
        "detail": "CancelJob: ()",
        "doc": "Cancels a background job started via @ScheduleJo",
        "param": "",
        "params": [],
        "call": "app.CancelJob()"
    },
    {
        "name": "CheckLicense",
        "kind": "Method",
        "detail": "CheckLicense: (key: string)",
        "doc": "will trigger a standard Google Play license check for the running application (if it is a paid App).",
        "param": "\n*@param* {string} `key` - String base64 encoded GPlay license key\n",
        "params": [{"name":"key: string","desc":"String base64 encoded GPlay license key","type":"string"}],
        "call": "app.CheckLicense(key: string)"
    },
    {
        "name": "CheckPermission",
        "kind": "Method",
        "detail": "CheckPermission: (type: string)",
        "doc": "CheckPermission checks whether the permission of a particular component has been granted.",
        "param": "\n*@param* {string} `type` - Camera|Storage|ExtSDcard|Network|Location|SMS|Calendar|Body|Contacts|Record|Biometric|Phone|Accounts|License\n",
        "params": [{"name":"type: string","desc":"Camera|Storage|ExtSDcard|Network|Location|SMS|Calendar|Body|Contacts|Record|Biometric|Phone|Accounts|License","type":"string"}],
        "call": "app.CheckPermission(type: string)"
    },
    {
        "name": "ChooseAccount",
        "kind": "Method",
        "detail": "ChooseAccount: (callback: function)",
        "doc": "Opens an Android dialog and allows the user to select one of the registered Google/Gmail accounts or add one. The selected email address is returned as the first argument in the callback function.",
        "param": "\n*@param* {function} `callback` - \n",
        "params": [{"name":"callback: function","desc":"","type":"function"}],
        "call": "app.ChooseAccount(callback: function)"
    },
    {
        "name": "ChooseContact",
        "kind": "Method",
        "detail": "ChooseContact: (type: string, callback: function)",
        "doc": "ChooseContact opens the Contacts app so that the user can select the name and either the phone number or email address of a user",
        "param": "\n*@param* {string} `type` - Phone|Email\n\n*@param* {function} `callback` - Phone|Email\n",
        "params": [{"name":"type: string","desc":"Phone|Email","type":"string"},{"name":"callback: function","desc":"Phone|Email","type":"function"}],
        "call": "app.ChooseContact(type: string, callback: function)"
    },
    {
        "name": "ChooseFile",
        "kind": "Method",
        "detail": "ChooseFile: (message: string, type: string, callback: function, fldr: string, options: )",
        "doc": "ChooseFile opens a file picker for user to select a local file or a file from GoogleDrive, OneDrive or DropBox.",
        "param": "\n*@param* {string} `message` - \n\n*@param* {string} `type` - mimetype\n\n*@param* {function} `callback` - mimetype\n\n*@param* {string} `fldr` - String path to file or folder ( “/absolute/...” or “relative/...” )\n\n*@param* {} `options` - keep file permission after reboot,nodownload-prevents file downloads\n",
        "params": [{"name":"message: string","desc":"","type":"string"},{"name":"type: string","desc":"mimetype","type":"string"},{"name":"callback: function","desc":"mimetype","type":"function"},{"name":"fldr: string","desc":"String path to file or folder ( “/absolute/...” or “relative/...” )","type":"string"},{"name":"options: ","desc":"keep file permission after reboot,nodownload-prevents file downloads","type":""}],
        "call": "app.ChooseFile(message: string, type: string, callback: function, fldr: string, options: )"
    },
    {
        "name": "ChooseImage",
        "kind": "Method",
        "detail": "ChooseImage: (options: string, callback: function)",
        "doc": "ChooseImage opens the photo gallery for user to select an image.",
        "param": "\n*@param* {string} `options` - String comma “,” separated |internal|external\n\n*@param* {function} `callback` - String comma “,” separated |internal|external\n",
        "params": [{"name":"options: string","desc":"String comma “,” separated |internal|external","type":"string"},{"name":"callback: function","desc":"String comma “,” separated |internal|external","type":"function"}],
        "call": "app.ChooseImage(options: string, callback: function)"
    },
    {
        "name": "ChooseWifi",
        "kind": "Method",
        "detail": "ChooseWifi: (title1: string, title2: string, callback: function, options: string, extra: string)",
        "doc": "ChooseWifi lets the user select a WiFi network in range",
        "param": "\n*@param* {string} `title1` - \n\n*@param* {string} `title2` - \n\n*@param* {function} `callback` - \n\n*@param* {string} `options` - String comma “,” separated force|large\n\n*@param* {string} `extra` - ssids\n",
        "params": [{"name":"title1: string","desc":"","type":"string"},{"name":"title2: string","desc":"","type":"string"},{"name":"callback: function","desc":"","type":"function"},{"name":"options: string","desc":"String comma “,” separated force|large","type":"string"},{"name":"extra: string","desc":"ssids","type":"string"}],
        "call": "app.ChooseWifi(title1: string, title2: string, callback: function, options: string, extra: string)"
    },
    {
        "name": "ClearCookies",
        "kind": "Method",
        "detail": "ClearCookies: (session: boolean)",
        "doc": "ClearCookies clears the saved cookies for webviews or html apps.",
        "param": "\n*@param* {boolean} `session` - Clear session cookies\n",
        "params": [{"name":"session: boolean","desc":"Clear session cookies","type":"boolean"}],
        "call": "app.ClearCookies(session: boolean)"
    },
    {
        "name": "ClearData",
        "kind": "Method",
        "detail": "ClearData: (file: string)",
        "doc": "ClearData deletes variables saved via app.Save*(). The file parameter is optional. If given, the specified file will be used, otherwise it will be located in the apps private Folder.",
        "param": "\n*@param* {string} `file` - String path to file ( “/absolute/...” or “relative/...” )\n",
        "params": [{"name":"file: string","desc":"String path to file ( “/absolute/...” or “relative/...” )","type":"string"}],
        "call": "app.ClearData(file: string)"
    },
    {
        "name": "ClearValue",
        "kind": "Method",
        "detail": "ClearValue: (name: string, file: string)",
        "doc": "ClearValue deletes a variable saved via app.Save*(). The file parameter is optional. If given, the specified file will be used, otherwise it will be located in the apps private Folder.",
        "param": "\n*@param* {string} `name` - \n\n*@param* {string} `file` - String path to file ( “/absolute/...” or “relative/...” )\n",
        "params": [{"name":"name: string","desc":"","type":"string"},{"name":"file: string","desc":"String path to file ( “/absolute/...” or “relative/...” )","type":"string"}],
        "call": "app.ClearValue(name: string, file: string)"
    },
    {
        "name": "CloseDrawer",
        "kind": "Method",
        "detail": "CloseDrawer: (side: string)",
        "doc": "Closes the drawer layout on the given side with slide animation.",
        "param": "\n*@param* {string} `side` - left|right\n",
        "params": [{"name":"side: string","desc":"left|right","type":"string"}],
        "call": "app.CloseDrawer(side: string)"
    },
    {
        "name": "CopyFile",
        "kind": "Method",
        "detail": "CopyFile: (source: string, destination: string)",
        "doc": "CopyFile copies a file to a given destination. The target must locate to the actual target file, not the folder. An existing file will be overridden.",
        "param": "\n*@param* {string} `source` - String path to file or folder ( “/absolute/...” or “relative/...” )\n\n*@param* {string} `destination` - String path to file or folder ( “/absolute/...” or “relative/...” )\n",
        "params": [{"name":"source: string","desc":"String path to file or folder ( “/absolute/...” or “relative/...” )","type":"string"},{"name":"destination: string","desc":"String path to file or folder ( “/absolute/...” or “relative/...” )","type":"string"}],
        "call": "app.CopyFile(source: string, destination: string)"
    },
    {
        "name": "CopyFolder",
        "kind": "Method",
        "detail": "CopyFolder: (source: string, destination: string, overwrite: boolean, filter: string)",
        "doc": "CopyFolder copies a folder and its contents to a given destination. If an item already exists in the destination it will not be overwritten unless overwrite is true.",
        "param": "\n*@param* {string} `source` - String path to file or folder ( “/absolute/...” or “relative/...” )\n\n*@param* {string} `destination` - String path to file or folder ( “/absolute/...” or “relative/...” )\n\n*@param* {boolean} `overwrite` - String path to file or folder ( “/absolute/...” or “relative/...” )\n\n*@param* {string} `filter` - pattern\n",
        "params": [{"name":"source: string","desc":"String path to file or folder ( “/absolute/...” or “relative/...” )","type":"string"},{"name":"destination: string","desc":"String path to file or folder ( “/absolute/...” or “relative/...” )","type":"string"},{"name":"overwrite: boolean","desc":"String path to file or folder ( “/absolute/...” or “relative/...” )","type":"boolean"},{"name":"filter: string","desc":"pattern","type":"string"}],
        "call": "app.CopyFolder(source: string, destination: string, overwrite: boolean, filter: string)"
    },
    {
        "name": "CreateAudioRecorder",
        "kind": "Method",
        "detail": "CreateAudioRecorder: ()",
        "doc": "The AudioRecorder object can be used to listen for sound and record it to a file",
        "param": "",
        "params": [],
        "call": "app.CreateAudioRecorder()"
    },
    {
        "name": "CreateBluetoothList",
        "kind": "Method",
        "detail": "CreateBluetoothList: (filter: string)",
        "doc": "CreateBluetoothList shows an Android dialog which allows the user to select a Bluetooth device from paired and discovered devices. See Also: @GetPairedBtDevices, @DiscoverBtDevices",
        "param": "\n*@param* {string} `filter` - \n",
        "params": [{"name":"filter: string","desc":"","type":"string"}],
        "call": "app.CreateBluetoothList(filter: string)"
    },
    {
        "name": "CreateBluetoothSerial",
        "kind": "Method",
        "detail": "CreateBluetoothSerial: (mode: string)",
        "doc": "The CreateBluetoothSerial object is used for communicating with other Bluetooth devices.The 'Text' mode is set by default, but **int**eger and **hex**adecimal values can also be sent",
        "param": "\n*@param* {string} `mode` - Text|Int|Hex\n",
        "params": [{"name":"mode: string","desc":"Text|Int|Hex","type":"string"}],
        "call": "app.CreateBluetoothSerial(mode: string)"
    },
    {
        "name": "CreateButton",
        "kind": "Method",
        "detail": "CreateButton: (text: string, width: number, height: number, options: string)",
        "doc": "Buttons created with the **CreateButton** method are used for interacting with the app. This is done by calling a callback function after clicking on the button. You can specify such a callback function with the **SetOnTouch** Method",
        "param": "\n*@param* {string} `text` - \n\n*@param* {number} `width` - Number fraction (0..1)\n\n*@param* {number} `height` - Number fraction (0..1)\n\n*@param* {string} `options` - String comma “,” separated FontAwesome,Html,Monospace,Normal|Aluminium|Gray|Lego,SingleLine,Custom,AutoShrink:Auto-shrinks text to fit,AutoSize:Auto-sizes text to fit,NoPad,FillX/Y,NoSound\n",
        "params": [{"name":"text: string","desc":"","type":"string"},{"name":"width: number","desc":"Number fraction (0..1)","type":"number"},{"name":"height: number","desc":"Number fraction (0..1)","type":"number"},{"name":"options: string","desc":"String comma “,” separated FontAwesome,Html,Monospace,Normal|Aluminium|Gray|Lego,SingleLine,Custom,AutoShrink:Auto-shrinks text to fit,AutoSize:Auto-sizes text to fit,NoPad,FillX/Y,NoSound","type":"string"}],
        "call": "app.CreateButton(text: string, width: number, height: number, options: string)"
    },
    {
        "name": "CreateCameraView",
        "kind": "Method",
        "detail": "CreateCameraView: (width: number, height: number, options: string)",
        "doc": "**CameraView**s are used to access the device camera",
        "param": "\n*@param* {number} `width` - Number fraction (0..1)\n\n*@param* {number} `height` - Number fraction (0..1)\n\n*@param* {string} `options` - String comma “,” separated Front,UseBitmap,UseABGR,NoRotate,\"&lt;resolution&gt;\":\"CIF: 352x288\\nQQVGA: 160x120\\nQVGA: 320x240\\nSVGA: 800x600\\nVGA: 640x480\\nXGA: 1024x768\\nUXGA: 1600x1200\"\n",
        "params": [{"name":"width: number","desc":"Number fraction (0..1)","type":"number"},{"name":"height: number","desc":"Number fraction (0..1)","type":"number"},{"name":"options: string","desc":"String comma “,” separated Front,UseBitmap,UseABGR,NoRotate,\\\"&lt;resolution&gt;\\\":\\\"CIF: 352x288\\\\nQQVGA: 160x120\\\\nQVGA: 320x240\\\\nSVGA: 800x600\\\\nVGA: 640x480\\\\nXGA: 1024x768\\\\nUXGA: 1600x1200\\\"","type":"string"}],
        "call": "app.CreateCameraView(width: number, height: number, options: string)"
    },
    {
        "name": "CreateCanvas",
        "kind": "Method",
        "detail": "CreateCanvas: ()",
        "doc": "Creates and adds a blank white Image with the Auto-Update feature turned off.",
        "param": "",
        "params": [],
        "call": "app.CreateCanvas()"
    },
    {
        "name": "CreateCheckBox",
        "kind": "Method",
        "detail": "CreateCheckBox: (text: string, width: number, height: number, options: string)",
        "doc": "CheckBoxes can be used to let the user en- or disable specific options in your app. They consist of a ticker box on the left and a text label on the right side",
        "param": "\n*@param* {string} `text` - \n\n*@param* {number} `width` - Number fraction (0..1)\n\n*@param* {number} `height` - Number fraction (0..1)\n\n*@param* {string} `options` - String comma “,” separated FillX/Y,NoSound\n",
        "params": [{"name":"text: string","desc":"","type":"string"},{"name":"width: number","desc":"Number fraction (0..1)","type":"number"},{"name":"height: number","desc":"Number fraction (0..1)","type":"number"},{"name":"options: string","desc":"String comma “,” separated FillX/Y,NoSound","type":"string"}],
        "call": "app.CreateCheckBox(text: string, width: number, height: number, options: string)"
    },
    {
        "name": "CreateCloudStore",
        "kind": "Method",
        "detail": "CreateCloudStore: (apiKey: string)",
        "doc": "The CloudStore component allows you to easily store and retrieve app data (as a simple or complex JSON object) from a cloud",
        "param": "\n*@param* {string} `apiKey` - \n",
        "params": [{"name":"apiKey: string","desc":"","type":"string"}],
        "call": "app.CreateCloudStore(apiKey: string)"
    },
    {
        "name": "CreateCodeEdit",
        "kind": "Method",
        "detail": "CreateCodeEdit: (text: string, width: number, height: number, options: string)",
        "doc": "CreateCodeEdit is a control for premium users which is like a TextEdit but it has advanced methods.",
        "param": "\n*@param* {string} `text` - \n\n*@param* {number} `width` - Number fraction (0..1)\n\n*@param* {number} `height` - Number fraction (0..1)\n\n*@param* {string} `options` - String comma “,” separated FillX/Y\n",
        "params": [{"name":"text: string","desc":"","type":"string"},{"name":"width: number","desc":"Number fraction (0..1)","type":"number"},{"name":"height: number","desc":"Number fraction (0..1)","type":"number"},{"name":"options: string","desc":"String comma “,” separated FillX/Y","type":"string"}],
        "call": "app.CreateCodeEdit(text: string, width: number, height: number, options: string)"
    },
    {
        "name": "CreateCustomTabs",
        "kind": "Method",
        "detail": "CreateCustomTabs: ()",
        "doc": "Creates a CustomTab control.",
        "param": "",
        "params": [],
        "call": "app.CreateCustomTabs()"
    },
    {
        "name": "CreateCrypt",
        "kind": "Method",
        "detail": "CreateCrypt: (options: string)",
        "doc": "The Crypt component is used to en- or decrypt a string with a given key or to create a hash of it",
        "param": "\n*@param* {string} `options` - String comma “,” separated\n",
        "params": [{"name":"options: string","desc":"String comma “,” separated","type":"string"}],
        "call": "app.CreateCrypt(options: string)"
    },
    {
        "name": "CreateDebug",
        "kind": "Method",
        "detail": "CreateDebug: ()",
        "doc": "CreateDebug is used to show the console as overlay above the app in order to see the debug logs.",
        "param": "",
        "params": [],
        "call": "app.CreateDebug()"
    },
    {
        "name": "CreateDialog",
        "kind": "Method",
        "detail": "CreateDialog: (title: string, options: string)",
        "doc": "Custom dialogs appear on top of the app and thus can be used to show temporary information or collect data from the user. They are also useful for displaying configuration or settings controls",
        "param": "\n*@param* {string} `title` - \n\n*@param* {string} `options` - String comma “,” separated AutoCancel|NoCancel,NoTitle,NoFocus,NoDim,NoKeys,TouchModal,NoTouch,Modal,Kiosk,Old:apply old list style affecting title style and unrounded corners\n",
        "params": [{"name":"title: string","desc":"","type":"string"},{"name":"options: string","desc":"String comma “,” separated AutoCancel|NoCancel,NoTitle,NoFocus,NoDim,NoKeys,TouchModal,NoTouch,Modal,Kiosk,Old:apply old list style affecting title style and unrounded corners","type":"string"}],
        "call": "app.CreateDialog(title: string, options: string)"
    },
    {
        "name": "CreateDownloader",
        "kind": "Method",
        "detail": "CreateDownloader: (options: string)",
        "doc": "The Downloader component can be used to download a file straight from the internet to your phone or tablet's local storage. You can download a file with the **Download** method which accepts a _source url_ and a _target directory_: <js>dwn.Download( srcFileUrl, targetDir );</js",
        "param": "\n*@param* {string} `options` - String comma “,” separated NoDialog|Light\n",
        "params": [{"name":"options: string","desc":"String comma “,” separated NoDialog|Light","type":"string"}],
        "call": "app.CreateDownloader(options: string)"
    },
    {
        "name": "CreateEmail",
        "kind": "Method",
        "detail": "CreateEmail: (account: string, password: string)",
        "doc": "The Email component allows us to send and receive emails without user interaction",
        "param": "\n*@param* {string} `account` - email\n\n*@param* {string} `password` - password\n",
        "params": [{"name":"account: string","desc":"email","type":"string"},{"name":"password: string","desc":"password","type":"string"}],
        "call": "app.CreateEmail(account: string, password: string)"
    },
    {
        "name": "CreateFile",
        "kind": "Method",
        "detail": "CreateFile: (file: string, mode: string)",
        "doc": "Returns a File object",
        "param": "\n*@param* {string} `file` - String path to file ( “/absolute/...” or “relative/...” )\n\n*@param* {string} `mode` - r|w|rw\n",
        "params": [{"name":"file: string","desc":"String path to file ( “/absolute/...” or “relative/...” )","type":"string"},{"name":"mode: string","desc":"r|w|rw","type":"string"}],
        "call": "app.CreateFile(file: string, mode: string)"
    },
    {
        "name": "CreateGame",
        "kind": "Method",
        "detail": "CreateGame: (file: string, orient: string)",
        "doc": "CreateGame automatically turns your app in game mode and adds a [GameView](CreateGameView.htm) control to it which loads the referenced script",
        "param": "\n*@param* {string} `file` - String path to file ( “/absolute/...” or “relative/...” )\n\n*@param* {string} `orient` - Portrait|Landscape\n",
        "params": [{"name":"file: string","desc":"String path to file ( “/absolute/...” or “relative/...” )","type":"string"},{"name":"orient: string","desc":"Portrait|Landscape","type":"string"}],
        "call": "app.CreateGame(file: string, orient: string)"
    },
    {
        "name": "CreateGameView",
        "kind": "Method",
        "detail": "CreateGameView: (width: number, height: number, options: string)",
        "doc": "The GameView is a blindingly fast container for game development with a physics engine and PIXI as underlying sprite container which uses the GPU to render graphics. The GameView runs a standalone script which can communicate with the main app via gfx.Execute or gmv.Execute vice versa",
        "param": "\n*@param* {number} `width` - Number fraction (0..1)\n\n*@param* {number} `height` - Number fraction (0..1)\n\n*@param* {string} `options` - String comma “,” separated\n",
        "params": [{"name":"width: number","desc":"Number fraction (0..1)","type":"number"},{"name":"height: number","desc":"Number fraction (0..1)","type":"number"},{"name":"options: string","desc":"String comma “,” separated","type":"string"}],
        "call": "app.CreateGameView(width: number, height: number, options: string)"
    },
    {
        "name": "CreateGLView",
        "kind": "Method",
        "detail": "CreateGLView: (width: number, height: number, options: string)",
        "doc": "GLView is a fast 2D canvas suitable for drawing and moving graphics around on the screen quickly, ideal for games. The options parameter should be always set to “Fast2d”",
        "param": "\n*@param* {number} `width` - Number fraction (0..1)\n\n*@param* {number} `height` - Number fraction (0..1)\n\n*@param* {string} `options` - fast2d\n",
        "params": [{"name":"width: number","desc":"Number fraction (0..1)","type":"number"},{"name":"height: number","desc":"Number fraction (0..1)","type":"number"},{"name":"options: string","desc":"fast2d","type":"string"}],
        "call": "app.CreateGLView(width: number, height: number, options: string)"
    },
    {
        "name": "CreateImage",
        "kind": "Method",
        "detail": "CreateImage: (file: string, width: number, height: number, options: string, pxw: number, pxh: number)",
        "doc": "Image controls can be used to display images such like png, jpg or gif",
        "param": "\n*@param* {string} `file` - String file path or content:// uri\n\n*@param* {number} `width` - String file path or content:// uri\n\n*@param* {number} `height` - String file path or content:// uri\n\n*@param* {string} `options` - String comma “,” separated fix:image with fixed resolution,alias,px:use pixel values for size,Button:causes image to depress like a button when touched,ScaleCenter,async:loads the image asynchronously,FontAwesome,Resize,TouchThrough,Icon:allows loading of app icons,wallpaper,NoPlay:prevent gifs from playing automatically\n\n*@param* {number} `pxw` - Number pixel\n\n*@param* {number} `pxh` - Number pixel\n",
        "params": [{"name":"file: string","desc":"String file path or content:// uri","type":"string"},{"name":"width: number","desc":"String file path or content:// uri","type":"number"},{"name":"height: number","desc":"String file path or content:// uri","type":"number"},{"name":"options: string","desc":"String comma “,” separated fix:image with fixed resolution,alias,px:use pixel values for size,Button:causes image to depress like a button when touched,ScaleCenter,async:loads the image asynchronously,FontAwesome,Resize,TouchThrough,Icon:allows loading of app icons,wallpaper,NoPlay:prevent gifs from playing automatically","type":"string"},{"name":"pxw: number","desc":"Number pixel","type":"number"},{"name":"pxh: number","desc":"Number pixel","type":"number"}],
        "call": "app.CreateImage(file: string, width: number, height: number, options: string, pxw: number, pxh: number)"
    },
    {
        "name": "CreateLayout",
        "kind": "Method",
        "detail": "CreateLayout: (type: string, options: string)",
        "doc": "Layouts are container objects which are used to visually organize graphical objects (controls), such as text, buttons and images on the screen. There are 4 types of layouts: _**“Linear”**_, _**“Absolute”**_, _**“Frame”**_ and _**“Card”**_",
        "param": "\n*@param* {string} `type` - Linear|Absolute|Frame|Card\n\n*@param* {string} `options` - String comma “,” separated TouchThrough:forwards touch events to underlying children,TouchSpy:spies for touch events on all children,Left|Top|Right|Bottom|Center|H/VCenter,Wrap,Horizontal|Vertical,FillX/Y\n",
        "params": [{"name":"type: string","desc":"Linear|Absolute|Frame|Card","type":"string"},{"name":"options: string","desc":"String comma “,” separated TouchThrough:forwards touch events to underlying children,TouchSpy:spies for touch events on all children,Left|Top|Right|Bottom|Center|H/VCenter,Wrap,Horizontal|Vertical,FillX/Y","type":"string"}],
        "call": "app.CreateLayout(type: string, options: string)"
    },
    {
        "name": "CreateList",
        "kind": "Method",
        "detail": "CreateList: (list: string, width: number, height: number, options: string, delim: string)",
        "doc": "If you want to display many dataset of the same structure you might consider using the **List** object",
        "param": "\n*@param* {string} `list` - String separated\n\n*@param* {number} `width` - Number fraction (0..1)\n\n*@param* {number} `height` - Number fraction (0..1)\n\n*@param* {string} `options` - String comma “,” separated bold:bold item titles|Expand:Expand list to full height inside scrollers,Menu:applies various settings to make the list appear like an in-app menu,Horiz:makes title and body text flow horizontally,html,FontAwesome,monospace,Normal,WhiteGrad|BlackGrad|AlumButton|GreenButton|OrangeButton,NoSound\n\n*@param* {string} `delim` - String comma “,” separated bold:bold item titles|Expand:Expand list to full height inside scrollers,Menu:applies various settings to make the list appear like an in-app menu,Horiz:makes title and body text flow horizontally,html,FontAwesome,monospace,Normal,WhiteGrad|BlackGrad|AlumButton|GreenButton|OrangeButton,NoSound\n",
        "params": [{"name":"list: string","desc":"String separated","type":"string"},{"name":"width: number","desc":"Number fraction (0..1)","type":"number"},{"name":"height: number","desc":"Number fraction (0..1)","type":"number"},{"name":"options: string","desc":"String comma “,” separated bold:bold item titles|Expand:Expand list to full height inside scrollers,Menu:applies various settings to make the list appear like an in-app menu,Horiz:makes title and body text flow horizontally,html,FontAwesome,monospace,Normal,WhiteGrad|BlackGrad|AlumButton|GreenButton|OrangeButton,NoSound","type":"string"},{"name":"delim: string","desc":"String comma “,” separated bold:bold item titles|Expand:Expand list to full height inside scrollers,Menu:applies various settings to make the list appear like an in-app menu,Horiz:makes title and body text flow horizontally,html,FontAwesome,monospace,Normal,WhiteGrad|BlackGrad|AlumButton|GreenButton|OrangeButton,NoSound","type":"string"}],
        "call": "app.CreateList(list: string, width: number, height: number, options: string, delim: string)"
    },
    {
        "name": "CreateListDialog",
        "kind": "Method",
        "detail": "CreateListDialog: (title: string, list: string, options: string)",
        "doc": "If you want a quick way to let the user select one or even multiple items of a given dataset you can use the ListDialog",
        "param": "\n*@param* {string} `title` - \n\n*@param* {string} `list` - \n\n*@param* {string} `options` - Multi\n",
        "params": [{"name":"title: string","desc":"","type":"string"},{"name":"list: string","desc":"","type":"string"},{"name":"options: string","desc":"Multi","type":"string"}],
        "call": "app.CreateListDialog(title: string, list: string, options: string)"
    },
    {
        "name": "CreateLocator",
        "kind": "Method",
        "detail": "CreateLocator: (type: string, options: string)",
        "doc": "The Locator component can be used to find your whereabouts on the planet using either your device's GPS or information from your network. The provider specifies where the locator should retreive its information from . “Network” means get the location from the cell network and wifi, “GPS” tells the locator to use the device's GP",
        "param": "\n*@param* {string} `type` - String comma “,” separated GPS,Network\n\n*@param* {string} `options` - String comma “,” separated\n",
        "params": [{"name":"type: string","desc":"String comma “,” separated GPS,Network","type":"string"},{"name":"options: string","desc":"String comma “,” separated","type":"string"}],
        "call": "app.CreateLocator(type: string, options: string)"
    },
    {
        "name": "CreateMediaPlayer",
        "kind": "Method",
        "detail": "CreateMediaPlayer: ()",
        "doc": "The MediaPlayer object can be used to play sound files from the phone or tablet",
        "param": "",
        "params": [],
        "call": "app.CreateMediaPlayer()"
    },
    {
        "name": "CreateMediaStore",
        "kind": "Method",
        "detail": "CreateMediaStore: ()",
        "doc": "The MediaStore is used to query audio information from the android provider or from the device in the “/sdcard/Music” folder",
        "param": "",
        "params": [],
        "call": "app.CreateMediaStore()"
    },
    {
        "name": "CreateMusic",
        "kind": "Method",
        "detail": "CreateMusic: ()",
        "doc": "Add music to your app. See the @../Music/Music.html page for more detail",
        "param": "",
        "params": [],
        "call": "app.CreateMusic()"
    },
    {
        "name": "CreateNetClient",
        "kind": "Method",
        "detail": "CreateNetClient: (type: string)",
        "doc": "NetClients can be used to communicate with servers on the web. You can choose between two different protocols",
        "param": "\n*@param* {string} `type` - UDP:fast but does not guarantee data correctness|TCP:slow but guarantees data correctness,Raw:drop 4 Byte header before every message\n",
        "params": [{"name":"type: string","desc":"UDP:fast but does not guarantee data correctness|TCP:slow but guarantees data correctness,Raw:drop 4 Byte header before every message","type":"string"}],
        "call": "app.CreateNetClient(type: string)"
    },
    {
        "name": "CreateNode",
        "kind": "Method",
        "detail": "CreateNode: (paths: string, options: string)",
        "doc": "Creates a NodeJS background process with all the functionality of common node.js",
        "param": "\n*@param* {string} `paths` - String path to file or folder ( “/absolute/...” or “relative/...” ) NODE_PATH env variable\n\n*@param* {string} `options` - String path to file or folder ( “/absolute/...” or “relative/...” ) NODE_PATH env variable\n",
        "params": [{"name":"paths: string","desc":"String path to file or folder ( “/absolute/...” or “relative/...” ) NODE_PATH env variable","type":"string"},{"name":"options: string","desc":"String path to file or folder ( “/absolute/...” or “relative/...” ) NODE_PATH env variable","type":"string"}],
        "call": "app.CreateNode(paths: string, options: string)"
    },
    {
        "name": "CreateNotification",
        "kind": "Method",
        "detail": "CreateNotification: (options: string)",
        "doc": "The Notification object can be used to put messages in the notification drawer. The “AutoCancel” **option** will automatically dismiss the notificatin if the user touches it. “FullScreen” tries to create a larger notification on the screen. And “OnGoing” makes the Notification closeable by your app only",
        "param": "\n*@param* {string} `options` - String comma “,” separated Ongoing,AutoCancel,FullScreen,NoVibrate,Low:priority\n",
        "params": [{"name":"options: string","desc":"String comma “,” separated Ongoing,AutoCancel,FullScreen,NoVibrate,Low:priority","type":"string"}],
        "call": "app.CreateNotification(options: string)"
    },
    {
        "name": "CreateNxt",
        "kind": "Method",
        "detail": "CreateNxt: ()",
        "doc": "The NXT object is used to manage the connection between your Android phone and the Lego Mindstorms NXT brick.",
        "param": "",
        "params": [],
        "call": "app.CreateNxt()"
    },
    {
        "name": "CreateOverlay",
        "kind": "Method",
        "detail": "CreateOverlay: (options: string)",
        "doc": "Overlays are displayed above everything on the screen - even on the home screen or above other applications. Overlays can be created from services as well which makes them almost perfect for interacting with them.",
        "param": "\n*@param* {string} `options` - String comma “,” separated\n",
        "params": [{"name":"options: string","desc":"String comma “,” separated","type":"string"}],
        "call": "app.CreateOverlay(options: string)"
    },
    {
        "name": "CreatePhoneState",
        "kind": "Method",
        "detail": "CreatePhoneState: (types: string)",
        "doc": "The PhoneState component is able to detect phone state changes",
        "param": "\n*@param* {string} `types` - CellLocation,DataConnection,DataActivity,CallState,ServiceState,SignalStrength,CallForwarding,MessageWaiting\n",
        "params": [{"name":"types: string","desc":"CellLocation,DataConnection,DataActivity,CallState,ServiceState,SignalStrength,CallForwarding,MessageWaiting","type":"string"}],
        "call": "app.CreatePhoneState(types: string)"
    },
    {
        "name": "CreatePlayStore",
        "kind": "Method",
        "detail": "CreatePlayStore: ()",
        "doc": "Creates a new PlayStore instance for retreiving informations or purchasing items",
        "param": "",
        "params": [],
        "call": "app.CreatePlayStore()"
    },
    {
        "name": "CreateScroller",
        "kind": "Method",
        "detail": "CreateScroller: (width: number, height: number, options: string)",
        "doc": "If you have much data to display which doesn't fit in the area availabe, you probably want to use a **Scroller**. The options for the Scroller are the same as the LinearLayout fill options, which set how a Scroller sizes within it's parent:- “FillX”, “FillY” and “FillXY”. By default Scrollers will auto-size to wrap their contents",
        "param": "\n*@param* {number} `width` - Number fraction (0..1)\n\n*@param* {number} `height` - Number fraction (0..1)\n\n*@param* {string} `options` - String comma “,” separated FillX|FillY|FillXY,Horizontal|Vertical,NoScrollBar,ScrollFade\n",
        "params": [{"name":"width: number","desc":"Number fraction (0..1)","type":"number"},{"name":"height: number","desc":"Number fraction (0..1)","type":"number"},{"name":"options: string","desc":"String comma “,” separated FillX|FillY|FillXY,Horizontal|Vertical,NoScrollBar,ScrollFade","type":"string"}],
        "call": "app.CreateScroller(width: number, height: number, options: string)"
    },
    {
        "name": "CreateSeekBar",
        "kind": "Method",
        "detail": "CreateSeekBar: (width: number, height: number, options: string)",
        "doc": "SeekBars are bars with a moveable pointer which let the user select a value in a given range",
        "param": "\n*@param* {number} `width` - Number fraction (0..1)\n\n*@param* {number} `height` - Number fraction (0..1)\n\n*@param* {string} `options` - String comma “,” separated FillX/Y\n",
        "params": [{"name":"width: number","desc":"Number fraction (0..1)","type":"number"},{"name":"height: number","desc":"Number fraction (0..1)","type":"number"},{"name":"options: string","desc":"String comma “,” separated FillX/Y","type":"string"}],
        "call": "app.CreateSeekBar(width: number, height: number, options: string)"
    },
    {
        "name": "CreateSensor",
        "kind": "Method",
        "detail": "CreateSensor: (type: string, options: string)",
        "doc": "The sensor object can be used to access numerous sensors of your device. You can use the **SetOnChange** function of the Sensor to set the name of a function you want to be called when a the changes occur",
        "param": "\n*@param* {string} `type` - Accelerometer|MagneticField|Orientation|Light|Proximity|Temperature|GameRotation|GeomagneticRotation|Gravity|Gyroscope|HeartRate|Acceleration|Pressure|Humidity|RotationMotion|StepCounter|StepDetector\n\n*@param* {string} `options` - String comma “,” separated Slow|Medium|Fast|Fastest\n",
        "params": [{"name":"type: string","desc":"Accelerometer|MagneticField|Orientation|Light|Proximity|Temperature|GameRotation|GeomagneticRotation|Gravity|Gyroscope|HeartRate|Acceleration|Pressure|Humidity|RotationMotion|StepCounter|StepDetector","type":"string"},{"name":"options: string","desc":"String comma “,” separated Slow|Medium|Fast|Fastest","type":"string"}],
        "call": "app.CreateSensor(type: string, options: string)"
    },
    {
        "name": "CreateService",
        "kind": "Method",
        "detail": "CreateService: (packageName: string, className: string, callback: function, options: string)",
        "doc": "Services run in the background and can be used to monitor online databases, local communication ports or changes in data on the file system. They can also trigger notifications to the user and launch apps when changes or timeouts occur",
        "param": "\n*@param* {string} `packageName` - this|&lt;package&gt;\n\n*@param* {string} `className` - this|&lt;class&gt;\n\n*@param* {function} `callback` - this|&lt;class&gt;\n\n*@param* {string} `options` - String comma “,” separated Persist:attempts to force restart if service killed\n",
        "params": [{"name":"packageName: string","desc":"this|&lt;package&gt;","type":"string"},{"name":"className: string","desc":"this|&lt;class&gt;","type":"string"},{"name":"callback: function","desc":"this|&lt;class&gt;","type":"function"},{"name":"options: string","desc":"String comma “,” separated Persist:attempts to force restart if service killed","type":"string"}],
        "call": "app.CreateService(packageName: string, className: string, callback: function, options: string)"
    },
    {
        "name": "CreateShortcut",
        "kind": "Method",
        "detail": "CreateShortcut: (name: string, iconFile: string, file: string, options: string)",
        "doc": "This method creates a shortcut of an app on your home screen - referencing to a js file runnable with DS.",
        "param": "\n*@param* {string} `name` - \n\n*@param* {string} `iconFile` - String path to file ( “/absolute/...” or “relative/...” )\n\n*@param* {string} `file` - String path to file ( “/absolute/...” or “relative/...” )\n\n*@param* {string} `options` - String comma “,” separated Portrait|Landscape,Transparent,Debug:start app in debug mode,Game:runs in GameView mode|remote\n",
        "params": [{"name":"name: string","desc":"","type":"string"},{"name":"iconFile: string","desc":"String path to file ( “/absolute/...” or “relative/...” )","type":"string"},{"name":"file: string","desc":"String path to file ( “/absolute/...” or “relative/...” )","type":"string"},{"name":"options: string","desc":"String comma “,” separated Portrait|Landscape,Transparent,Debug:start app in debug mode,Game:runs in GameView mode|remote","type":"string"}],
        "call": "app.CreateShortcut(name: string, iconFile: string, file: string, options: string)"
    },
    {
        "name": "CreateSmartWatch",
        "kind": "Method",
        "detail": "CreateSmartWatch: (type: string)",
        "doc": "Returns a SmartWatch object",
        "param": "\n*@param* {string} `type` - |Sony\n",
        "params": [{"name":"type: string","desc":"|Sony","type":"string"}],
        "call": "app.CreateSmartWatch(type: string)"
    },
    {
        "name": "CreateSMS",
        "kind": "Method",
        "detail": "CreateSMS: ()",
        "doc": "Returns a new SMS object to send and retreive SMS messages.",
        "param": "",
        "params": [],
        "call": "app.CreateSMS()"
    },
    {
        "name": "CreateSpeechRec",
        "kind": "Method",
        "detail": "CreateSpeechRec: (options: string)",
        "doc": "The **SpeechRec** object can be used to listen for and recognize speech",
        "param": "\n*@param* {string} `options` - String comma “,” separated NoBeep,Partial\n",
        "params": [{"name":"options: string","desc":"String comma “,” separated NoBeep,Partial","type":"string"}],
        "call": "app.CreateSpeechRec(options: string)"
    },
    {
        "name": "CreateSpinner",
        "kind": "Method",
        "detail": "CreateSpinner: (list: string, width: number, height: number, options: string)",
        "doc": "Create Spinners using the CreateSpinner method of the app object",
        "param": "\n*@param* {string} `list` - String comma “,” separated\n\n*@param* {number} `width` - Number fraction (0..1)\n\n*@param* {number} `height` - Number fraction (0..1)\n\n*@param* {string} `options` - String comma “,” separated FillX/Y,NoSound\n",
        "params": [{"name":"list: string","desc":"String comma “,” separated","type":"string"},{"name":"width: number","desc":"Number fraction (0..1)","type":"number"},{"name":"height: number","desc":"Number fraction (0..1)","type":"number"},{"name":"options: string","desc":"String comma “,” separated FillX/Y,NoSound","type":"string"}],
        "call": "app.CreateSpinner(list: string, width: number, height: number, options: string)"
    },
    {
        "name": "CreateSwitch",
        "kind": "Method",
        "detail": "CreateSwitch: (text: string, width: number, height: number, options: string)",
        "doc": "Switches are a variant of [toggle buttons](CreateToggle.htm) with another look",
        "param": "\n*@param* {string} `text` - \n\n*@param* {number} `width` - Number fraction (0..1)\n\n*@param* {number} `height` - Number fraction (0..1)\n\n*@param* {string} `options` - String comma “,” separated Monospace,Custom,NoPad,FillX/Y,NoSound\n",
        "params": [{"name":"text: string","desc":"","type":"string"},{"name":"width: number","desc":"Number fraction (0..1)","type":"number"},{"name":"height: number","desc":"Number fraction (0..1)","type":"number"},{"name":"options: string","desc":"String comma “,” separated Monospace,Custom,NoPad,FillX/Y,NoSound","type":"string"}],
        "call": "app.CreateSwitch(text: string, width: number, height: number, options: string)"
    },
    {
        "name": "CreateSynth",
        "kind": "Method",
        "detail": "CreateSynth: (type: string)",
        "doc": "Returns a Synth object which can produces a variety of sounds, sound effects and music",
        "param": "\n*@param* {string} `type` - Signal,VCA,VCF\n",
        "params": [{"name":"type: string","desc":"Signal,VCA,VCF","type":"string"}],
        "call": "app.CreateSynth(type: string)"
    },
    {
        "name": "CreateSysProc",
        "kind": "Method",
        "detail": "CreateSysProc: (cmd: , env: string, dir: string, options: string)",
        "doc": "Creates a shell SystemProcess (ie&period; “sh”, “su” if <red>root</red> or “busybox” if <blue>installed</blue>) which can be reused throughout the program.",
        "param": "\n*@param* {} `cmd` - sh|su|busybox\n\n*@param* {string} `env` - sh|su|busybox\n\n*@param* {string} `dir` - String path to folder ( “/absolute/...” or “relative/...” )\n\n*@param* {string} `options` - String comma “,” separated combine:combines stdout and stderr|builder:force use of proc builder\n",
        "params": [{"name":"cmd: ","desc":"sh|su|busybox","type":""},{"name":"env: string","desc":"sh|su|busybox","type":"string"},{"name":"dir: string","desc":"String path to folder ( “/absolute/...” or “relative/...” )","type":"string"},{"name":"options: string","desc":"String comma “,” separated combine:combines stdout and stderr|builder:force use of proc builder","type":"string"}],
        "call": "app.CreateSysProc(cmd: , env: string, dir: string, options: string)"
    },
    {
        "name": "CreateTabs",
        "kind": "Method",
        "detail": "CreateTabs: (list: string, width: number, height: number, options: string)",
        "doc": "Tabs are useful if you have multiple subsections in your app. The user can then press the title of a tab and the control will automatically switch to the corresponding layout",
        "param": "\n*@param* {string} `list` - String comma “,” separated\n\n*@param* {number} `width` - Number fraction (0..1)\n\n*@param* {number} `height` - Number fraction (0..1)\n\n*@param* {string} `options` - NoMargins\n",
        "params": [{"name":"list: string","desc":"String comma “,” separated","type":"string"},{"name":"width: number","desc":"Number fraction (0..1)","type":"number"},{"name":"height: number","desc":"Number fraction (0..1)","type":"number"},{"name":"options: string","desc":"NoMargins","type":"string"}],
        "call": "app.CreateTabs(list: string, width: number, height: number, options: string)"
    },
    {
        "name": "CreateText",
        "kind": "Method",
        "detail": "CreateText: (text: string, width: number, height: number, options: string)",
        "doc": "If you want to display text in your app you can use the Text object. You can use the “Multiline” **option** to allow multi-line text and the “Left” or “Right” options to align the text. The default is single line centered text",
        "param": "\n*@param* {string} `text` - \n\n*@param* {number} `width` - Number fraction (0..1)\n\n*@param* {number} `height` - Number fraction (0..1)\n\n*@param* {string} `options` - String comma “,” separated AutoScale,AutoSize,Multiline,Left|Right|Bottom|VCenter,Html,Bold,Monospace,AutoShrink:Auto-shrinks text to fit,NoWrap,Log,FillX/Y\n",
        "params": [{"name":"text: string","desc":"","type":"string"},{"name":"width: number","desc":"Number fraction (0..1)","type":"number"},{"name":"height: number","desc":"Number fraction (0..1)","type":"number"},{"name":"options: string","desc":"String comma “,” separated AutoScale,AutoSize,Multiline,Left|Right|Bottom|VCenter,Html,Bold,Monospace,AutoShrink:Auto-shrinks text to fit,NoWrap,Log,FillX/Y","type":"string"}],
        "call": "app.CreateText(text: string, width: number, height: number, options: string)"
    },
    {
        "name": "CreateTextEdit",
        "kind": "Method",
        "detail": "CreateTextEdit: (text: string, width: number, height: number, options: string)",
        "doc": "If you want the user to enter custom data you probably need the **TextEdit** control. For number input only you can apply the “numbers” **option**",
        "param": "\n*@param* {string} `text` - \n\n*@param* {number} `width` - Number fraction (0..1)\n\n*@param* {number} `height` - Number fraction (0..1)\n\n*@param* {string} `options` - String comma “,” separated AutoSelect:Select all Text if user enter the Textedit,AutoSize:Expand or shrink the control automatically so the text fits in the Textedit,Bold:Write bold text,Extract:enables full screen keyboard in landscape mode,Left:Justify the text to the left|Center:Justify the text in the middle|Right:Justify the text to the right|Monospace,NoSpell:Disable the spell-checker,NoKeyboard:Shows no Keyboard|Numbers,ReadOnly:The user cant change the Text,SingleLine:Dont break text for long lines and change 'Enter' key to 'Done',FillX/Y,Password:displays characters as dots\n",
        "params": [{"name":"text: string","desc":"","type":"string"},{"name":"width: number","desc":"Number fraction (0..1)","type":"number"},{"name":"height: number","desc":"Number fraction (0..1)","type":"number"},{"name":"options: string","desc":"String comma “,” separated AutoSelect:Select all Text if user enter the Textedit,AutoSize:Expand or shrink the control automatically so the text fits in the Textedit,Bold:Write bold text,Extract:enables full screen keyboard in landscape mode,Left:Justify the text to the left|Center:Justify the text in the middle|Right:Justify the text to the right|Monospace,NoSpell:Disable the spell-checker,NoKeyboard:Shows no Keyboard|Numbers,ReadOnly:The user cant change the Text,SingleLine:Dont break text for long lines and change 'Enter' key to 'Done',FillX/Y,Password:displays characters as dots","type":"string"}],
        "call": "app.CreateTextEdit(text: string, width: number, height: number, options: string)"
    },
    {
        "name": "CreateTheme",
        "kind": "Method",
        "detail": "CreateTheme: (baseTheme: string)",
        "doc": "Returns a Theme object.",
        "param": "\n*@param* {string} `baseTheme` - Dark|Light\n",
        "params": [{"name":"baseTheme: string","desc":"Dark|Light","type":"string"}],
        "call": "app.CreateTheme(baseTheme: string)"
    },
    {
        "name": "CreateToggle",
        "kind": "Method",
        "detail": "CreateToggle: (text: string, width: number, height: number, options: string)",
        "doc": "Toggle buttons are basically [Buttons](CreateButton.htm) with an additional light bar indicating if it is activated or not. The user can toggle this state by pressing on it",
        "param": "\n*@param* {string} `text` - \n\n*@param* {number} `width` - Number fraction (0..1)\n\n*@param* {number} `height` - Number fraction (0..1)\n\n*@param* {string} `options` - String comma “,” separated Monospace,Custom,NoPad,FillX/Y,NoSound\n",
        "params": [{"name":"text: string","desc":"","type":"string"},{"name":"width: number","desc":"Number fraction (0..1)","type":"number"},{"name":"height: number","desc":"Number fraction (0..1)","type":"number"},{"name":"options: string","desc":"String comma “,” separated Monospace,Custom,NoPad,FillX/Y,NoSound","type":"string"}],
        "call": "app.CreateToggle(text: string, width: number, height: number, options: string)"
    },
    {
        "name": "CreateUSBSerial",
        "kind": "Method",
        "detail": "CreateUSBSerial: (baudRate: number, dataBits: number, stopBits: number, parity: number, device: number)",
        "doc": "The USBSerial component can be used to communicate with other USB devices connected to yours",
        "param": "\n*@param* {number} `baudRate` - Number integer 300|600|1200|2400|4800|9600|19200|38400|57600|115200|230400|460800|921600\n\n*@param* {number} `dataBits` - Number integer 5|6|7|8\n\n*@param* {number} `stopBits` - Number integer 1|2|15\n\n*@param* {number} `parity` - Number integer 0:none|1:odd|2:even|3:mark|4:space\n\n*@param* {number} `device` - pid\n",
        "params": [{"name":"baudRate: number","desc":"Number integer 300|600|1200|2400|4800|9600|19200|38400|57600|115200|230400|460800|921600","type":"number"},{"name":"dataBits: number","desc":"Number integer 5|6|7|8","type":"number"},{"name":"stopBits: number","desc":"Number integer 1|2|15","type":"number"},{"name":"parity: number","desc":"Number integer 0:none|1:odd|2:even|3:mark|4:space","type":"number"},{"name":"device: number","desc":"pid","type":"number"}],
        "call": "app.CreateUSBSerial(baudRate: number, dataBits: number, stopBits: number, parity: number, device: number)"
    },
    {
        "name": "CreateVideoView",
        "kind": "Method",
        "detail": "CreateVideoView: (width: number, height: number, options: string)",
        "doc": "The **VideoView** can be used to play local video files from the filesystem or video streams from remote sources",
        "param": "\n*@param* {number} `width` - Number fraction (0..1)\n\n*@param* {number} `height` - Number fraction (0..1)\n\n*@param* {string} `options` - String comma “,” separated\n",
        "params": [{"name":"width: number","desc":"Number fraction (0..1)","type":"number"},{"name":"height: number","desc":"Number fraction (0..1)","type":"number"},{"name":"options: string","desc":"String comma “,” separated","type":"string"}],
        "call": "app.CreateVideoView(width: number, height: number, options: string)"
    },
    {
        "name": "CreateWallpaper",
        "kind": "Method",
        "detail": "CreateWallpaper: (options: string)",
        "doc": "Creates a wallpaper instance in the wallpaper.js script.",
        "param": "\n*@param* {string} `options` - String comma “,” separated\n",
        "params": [{"name":"options: string","desc":"String comma “,” separated","type":"string"}],
        "call": "app.CreateWallpaper(options: string)"
    },
    {
        "name": "CreateWebServer",
        "kind": "Method",
        "detail": "CreateWebServer: (port: number, options: string)",
        "doc": "Web servers form the foundation of the web, especially the Internet of Things (IoT). Turning your phone or tablet into a web server or creating a network of interconnected devices is very simple with DroidScript. Set a document root for the server using the SetFolder method of the WebServer object. This is the folder location on your device that your web pages will be served from",
        "param": "\n*@param* {number} `port` - Number integer\n\n*@param* {string} `options` - String comma “,” separated ListDir:Show files in folder|Upload:Allow file uploads|NoWelcome:Ignore index&period;html|Reflect:Reflect web socket messages back to all clients,\"&lt;BUFSIZE&gt;\":\"“ws_64k, ws_128k, ws_512k, ws_1M, ws_5M, ws_10M”\"\n",
        "params": [{"name":"port: number","desc":"Number integer","type":"number"},{"name":"options: string","desc":"String comma “,” separated ListDir:Show files in folder|Upload:Allow file uploads|NoWelcome:Ignore index&period;html|Reflect:Reflect web socket messages back to all clients,\\\"&lt;BUFSIZE&gt;\\\":\\\"“ws_64k, ws_128k, ws_512k, ws_1M, ws_5M, ws_10M”\\\"","type":"string"}],
        "call": "app.CreateWebServer(port: number, options: string)"
    },
    {
        "name": "CreateWebSocket",
        "kind": "Method",
        "detail": "CreateWebSocket: (ip: string, id: string, retry: number, options: string)",
        "doc": "WebSocket are useful when constantly comminicating with a server and when a fast reaction time is required",
        "param": "\n*@param* {string} `ip` - \n\n*@param* {string} `id` - \n\n*@param* {number} `retry` - Number integer\n\n*@param* {string} `options` - Number integer\n",
        "params": [{"name":"ip: string","desc":"","type":"string"},{"name":"id: string","desc":"","type":"string"},{"name":"retry: number","desc":"Number integer","type":"number"},{"name":"options: string","desc":"Number integer","type":"string"}],
        "call": "app.CreateWebSocket(ip: string, id: string, retry: number, options: string)"
    },
    {
        "name": "CreateWebView",
        "kind": "Method",
        "detail": "CreateWebView: (width: number, height: number, options: string, zoom: number)",
        "doc": "You can create a control to display local or remote web pages in your App using the **CreateWebView** method",
        "param": "\n*@param* {number} `width` - Number fraction (0..1)\n\n*@param* {number} `height` - Number fraction (0..1)\n\n*@param* {string} `options` - String comma “,” separated AllowZoom:Allows the user to zoom the page,AutoZoom,Wide:\"force page using “wide” viewport\",FillX/Y,NoActionBar:prevents copy/paste popup,IgnoreErrors,IgnoreSSLErrors,NoApp:prevent app&period;* calls,NoCapture:Disable camera,NoLocate:Disable location sensor,NoLongTouch,NoPause:Dont pause WebView when app in background,NoScrollBars,Overview:Zoom to full width of page,Progress:Shows a progress indicator when loading,ScrollFade,UseBasicInput:makes softkeyboard useful for html code editors,UseBrowser:Open links in external browser\n\n*@param* {number} `zoom` - Number percent\n",
        "params": [{"name":"width: number","desc":"Number fraction (0..1)","type":"number"},{"name":"height: number","desc":"Number fraction (0..1)","type":"number"},{"name":"options: string","desc":"String comma “,” separated AllowZoom:Allows the user to zoom the page,AutoZoom,Wide:\\\"force page using “wide” viewport\\\",FillX/Y,NoActionBar:prevents copy/paste popup,IgnoreErrors,IgnoreSSLErrors,NoApp:prevent app&period;* calls,NoCapture:Disable camera,NoLocate:Disable location sensor,NoLongTouch,NoPause:Dont pause WebView when app in background,NoScrollBars,Overview:Zoom to full width of page,Progress:Shows a progress indicator when loading,ScrollFade,UseBasicInput:makes softkeyboard useful for html code editors,UseBrowser:Open links in external browser","type":"string"},{"name":"zoom: number","desc":"Number percent","type":"number"}],
        "call": "app.CreateWebView(width: number, height: number, options: string, zoom: number)"
    },
    {
        "name": "CreateWizard",
        "kind": "Method",
        "detail": "CreateWizard: (title: string, width: number, height: number, callback: function, options: string)",
        "doc": "The wizard is supposed to simplify a configuration progress which requires several inputs and decisions by the user",
        "param": "\n*@param* {string} `title` - \n\n*@param* {number} `width` - Number fraction (0..1)\n\n*@param* {number} `height` - Number fraction (0..1)\n\n*@param* {function} `callback` - Number fraction (0..1)\n\n*@param* {string} `options` - String comma “,” separated AutoCancel|NoCancel,NoTitle,NoFocus,NoDim,NoKeys,TouchModal,NoTouch\n",
        "params": [{"name":"title: string","desc":"","type":"string"},{"name":"width: number","desc":"Number fraction (0..1)","type":"number"},{"name":"height: number","desc":"Number fraction (0..1)","type":"number"},{"name":"callback: function","desc":"Number fraction (0..1)","type":"function"},{"name":"options: string","desc":"String comma “,” separated AutoCancel|NoCancel,NoTitle,NoFocus,NoDim,NoKeys,TouchModal,NoTouch","type":"string"}],
        "call": "app.CreateWizard(title: string, width: number, height: number, callback: function, options: string)"
    },
    {
        "name": "CreateYesNoDialog",
        "kind": "Method",
        "detail": "CreateYesNoDialog: (message: string, options: string)",
        "doc": "The YesNo dialog can be used to let the user confirm a specific action. Its the equivalent to the js confirm function, but it is more customizable. <grey>(and doesn't crash when aborting</grey",
        "param": "\n*@param* {string} `message` - \n\n*@param* {string} `options` - String comma “,” separated NoDim,NoFocus,TouchModal\n",
        "params": [{"name":"message: string","desc":"","type":"string"},{"name":"options: string","desc":"String comma “,” separated NoDim,NoFocus,TouchModal","type":"string"}],
        "call": "app.CreateYesNoDialog(message: string, options: string)"
    },
    {
        "name": "CreateZipUtil",
        "kind": "Method",
        "detail": "CreateZipUtil: (mode: string)",
        "doc": "The ZipUtil is handy for creating, editing and extracting zip files. You can even add files or texts to existing zip files, list their contents and extract single files from them",
        "param": "\n*@param* {string} `mode` - \n",
        "params": [{"name":"mode: string","desc":"","type":"string"}],
        "call": "app.CreateZipUtil(mode: string)"
    },
    {
        "name": "Debug",
        "kind": "Method",
        "detail": "Debug: (message: string)",
        "doc": "This function is an app equivalent to console.log(msg) which writes text into a console visible in debug mode “true” or “console”.",
        "param": "\n*@param* {string} `message` - \n",
        "params": [{"name":"message: string","desc":"","type":"string"}],
        "call": "app.Debug(message: string)"
    },
    {
        "name": "DeleteDatabase",
        "kind": "Method",
        "detail": "DeleteDatabase: (name: string)",
        "doc": "DeleteDatabase removes a specific database",
        "param": "\n*@param* {string} `name` - \n",
        "params": [{"name":"name: string","desc":"","type":"string"}],
        "call": "app.DeleteDatabase(name: string)"
    },
    {
        "name": "DeleteFile",
        "kind": "Method",
        "detail": "DeleteFile: (file: string)",
        "doc": "DeleteFile deletes a given file from the filesystem. This makes it hard to restore it!",
        "param": "\n*@param* {string} `file` - String path to file ( “/absolute/...” or “relative/...” )\n",
        "params": [{"name":"file: string","desc":"String path to file ( “/absolute/...” or “relative/...” )","type":"string"}],
        "call": "app.DeleteFile(file: string)"
    },
    {
        "name": "DeleteFolder",
        "kind": "Method",
        "detail": "DeleteFolder: (folder: string)",
        "doc": "DeleteFolder does the same as DeleteFile but with folders. It recursively removes all files and folders of the given folder and finally deletes it.",
        "param": "\n*@param* {string} `folder` - String path to folder ( “/absolute/...” or “relative/...” )\n",
        "params": [{"name":"folder: string","desc":"String path to folder ( “/absolute/...” or “relative/...” )","type":"string"}],
        "call": "app.DeleteFolder(folder: string)"
    },
    {
        "name": "DestroyLayout",
        "kind": "Method",
        "detail": "DestroyLayout: (layout: appobject)",
        "doc": "DestroyLayout destroys a layout and all its contents so it can't be used any more. As a result, all memory occupied by these objects will be released.",
        "param": "\n*@param* {appobject} `layout` - CreateLayout\n",
        "params": [{"name":"layout: appobject","desc":"CreateLayout","type":"appobject"}],
        "call": "app.DestroyLayout(layout: appobject)"
    },
    {
        "name": "DisableKeys",
        "kind": "Method",
        "detail": "DisableKeys: (keyList: string)",
        "doc": "DisableKeys prevents the default behavior of several hard, soft or keyboard keys",
        "param": "\n*@param* {string} `keyList` - String comma “,” separated VOLUME_DOWN,VOLUME_UP,FORWARD,BACK,MENU,ENTER,...\n",
        "params": [{"name":"keyList: string","desc":"String comma “,” separated VOLUME_DOWN,VOLUME_UP,FORWARD,BACK,MENU,ENTER,...","type":"string"}],
        "call": "app.DisableKeys(keyList: string)"
    },
    {
        "name": "DisableTouch",
        "kind": "Method",
        "detail": "DisableTouch: (disable: boolean)",
        "doc": "Use this method to prevent any user interaction with the app.",
        "param": "\n*@param* {boolean} `disable` - \n",
        "params": [{"name":"disable: boolean","desc":"","type":"boolean"}],
        "call": "app.DisableTouch(disable: boolean)"
    },
    {
        "name": "DiscoverBtDevices",
        "kind": "Method",
        "detail": "DiscoverBtDevices: (filter: string, onFound: function, onComplete: function)",
        "doc": "Use DiscoverBtDevices to search for other bluetooth devices which are not paired with the current device. If any was found it will be forwarded directly to the **onFound** callback. If the search has finished **onComplete** function will be called",
        "param": "\n*@param* {string} `filter` - \n\n*@param* {function} `onFound` - \n\n*@param* {function} `onComplete` - \n",
        "params": [{"name":"filter: string","desc":"","type":"string"},{"name":"onFound: function","desc":"","type":"function"},{"name":"onComplete: function","desc":"","type":"function"}],
        "call": "app.DiscoverBtDevices(filter: string, onFound: function, onComplete: function)"
    },
    {
        "name": "DownloadFile",
        "kind": "Method",
        "detail": "DownloadFile: (source: string, destination: string, title: string, description: string, options: string)",
        "doc": "Downloads a file using the Android's built-in download manager which creates a notification with the current download status and a custom title and description",
        "param": "\n*@param* {string} `source` - \n\n*@param* {string} `destination` - String path to file or folder ( “/absolute/...” or “relative/...” )\n\n*@param* {string} `title` - String path to file or folder ( “/absolute/...” or “relative/...” )\n\n*@param* {string} `description` - String path to file or folder ( “/absolute/...” or “relative/...” )\n\n*@param* {string} `options` - NoDialog\n",
        "params": [{"name":"source: string","desc":"","type":"string"},{"name":"destination: string","desc":"String path to file or folder ( “/absolute/...” or “relative/...” )","type":"string"},{"name":"title: string","desc":"String path to file or folder ( “/absolute/...” or “relative/...” )","type":"string"},{"name":"description: string","desc":"String path to file or folder ( “/absolute/...” or “relative/...” )","type":"string"},{"name":"options: string","desc":"NoDialog","type":"string"}],
        "call": "app.DownloadFile(source: string, destination: string, title: string, description: string, options: string)"
    },
    {
        "name": "EnableBackKey",
        "kind": "Method",
        "detail": "EnableBackKey: (enable: boolean)",
        "doc": "Allows to en- or disable the devices back key. When it is disabled the global _OnBack_ app event will called when the user presses the back button - otherwise the app exits",
        "param": "\n*@param* {boolean} `enable` - \n",
        "params": [{"name":"enable: boolean","desc":"","type":"boolean"}],
        "call": "app.EnableBackKey(enable: boolean)"
    },
    {
        "name": "Error",
        "kind": "Method",
        "detail": "Error: (message: string, line: number, file: string, quit: boolean)",
        "doc": "Shows a detailed error message with message, file and line in an asynchroneous dialog. You can also set it to quit the app after the user dismisses the dialog.",
        "param": "\n*@param* {string} `message` - \n\n*@param* {number} `line` - Number integer\n\n*@param* {string} `file` - String path to file ( “/absolute/...” or “relative/...” )\n\n*@param* {boolean} `quit` - String path to file ( “/absolute/...” or “relative/...” )\n",
        "params": [{"name":"message: string","desc":"","type":"string"},{"name":"line: number","desc":"Number integer","type":"number"},{"name":"file: string","desc":"String path to file ( “/absolute/...” or “relative/...” )","type":"string"},{"name":"quit: boolean","desc":"String path to file ( “/absolute/...” or “relative/...” )","type":"boolean"}],
        "call": "app.Error(message: string, line: number, file: string, quit: boolean)"
    },
    {
        "name": "Execute",
        "kind": "Method",
        "detail": "Execute: (js: string)",
        "doc": "Executes a piece of code asynchroneously to your program. It is designed for interacting with your main app from within a [WebView](CreateWebView.htm)",
        "param": "\n*@param* {string} `js` - String javascript code\n",
        "params": [{"name":"js: string","desc":"String javascript code","type":"string"}],
        "call": "app.Execute(js: string)"
    },
    {
        "name": "Exit",
        "kind": "Method",
        "detail": "Exit: (kill: boolean)",
        "doc": "With Exit you can cancel and completely stop the app. You can also forcefully **kill** the app by passing true as first argument",
        "param": "\n*@param* {boolean} `kill` - \n",
        "params": [{"name":"kill: boolean","desc":"","type":"boolean"}],
        "call": "app.Exit(kill: boolean)"
    },
    {
        "name": "ExtExec",
        "kind": "Method",
        "detail": "ExtExec: (name: string, file: string, args: string, options: string)",
        "doc": "ExtExec allows you to execute Linux shell commands in the powerful Linux environment provided by the free app called Termux",
        "param": "\n*@param* {string} `name` - termux\n\n*@param* {string} `file` - String path to file ( “/absolute/...” or “relative/...” )\n\n*@param* {string} `args` - String path to file ( “/absolute/...” or “relative/...” )\n\n*@param* {string} `options` - hide\n",
        "params": [{"name":"name: string","desc":"termux","type":"string"},{"name":"file: string","desc":"String path to file ( “/absolute/...” or “relative/...” )","type":"string"},{"name":"args: string","desc":"String path to file ( “/absolute/...” or “relative/...” )","type":"string"},{"name":"options: string","desc":"hide","type":"string"}],
        "call": "app.ExtExec(name: string, file: string, args: string, options: string)"
    },
    {
        "name": "ExtractAssets",
        "kind": "Method",
        "detail": "ExtractAssets: (source: string, destination: string, overwrite: boolean, options: string)",
        "doc": "ExtractAssets allows to extract folders and files from your compiled APK to the local storage. But it works for local DroidScript projects as well. When override is false, already existant files will be kept and not overridden",
        "param": "\n*@param* {string} `source` - String path to file or folder ( “/absolute/...” or “relative/...” )\n\n*@param* {string} `destination` - String path to file or folder ( “/absolute/...” or “relative/...” )\n\n*@param* {boolean} `overwrite` - String path to file or folder ( “/absolute/...” or “relative/...” )\n\n*@param* {string} `options` - DoEvents:extract in background\n",
        "params": [{"name":"source: string","desc":"String path to file or folder ( “/absolute/...” or “relative/...” )","type":"string"},{"name":"destination: string","desc":"String path to file or folder ( “/absolute/...” or “relative/...” )","type":"string"},{"name":"overwrite: boolean","desc":"String path to file or folder ( “/absolute/...” or “relative/...” )","type":"boolean"},{"name":"options: string","desc":"DoEvents:extract in background","type":"string"}],
        "call": "app.ExtractAssets(source: string, destination: string, overwrite: boolean, options: string)"
    },
    {
        "name": "ExtractPlugins",
        "kind": "Method",
        "detail": "ExtractPlugins: ()",
        "doc": "ExtractPlugins overrides old plugin versions in the app's private folder with newer versions shipped with the APK.",
        "param": "",
        "params": [],
        "call": "app.ExtractPlugins()"
    },
    {
        "name": "FileExists",
        "kind": "Method",
        "detail": "FileExists: (file: string)",
        "doc": "FileExists Checks if a given file exists in your filesystem or not.",
        "param": "\n*@param* {string} `file` - String path to file ( “/absolute/...” or “relative/...” )\n",
        "params": [{"name":"file: string","desc":"String path to file ( “/absolute/...” or “relative/...” )","type":"string"}],
        "call": "app.FileExists(file: string)"
    },
    {
        "name": "FolderExists",
        "kind": "Method",
        "detail": "FolderExists: (folder: string)",
        "doc": "Checks if a given folder exits or not.",
        "param": "\n*@param* {string} `folder` - String path to folder ( “/absolute/...” or “relative/...” )\n",
        "params": [{"name":"folder: string","desc":"String path to folder ( “/absolute/...” or “relative/...” )","type":"string"}],
        "call": "app.FolderExists(folder: string)"
    },
    {
        "name": "Func",
        "kind": "Method",
        "detail": "Func: (name: string, args...: all types)",
        "doc": "Call main app functions from inside a webvie",
        "param": "\n*@param* {string} `name` - \n\n*@param* {all types} `args...` - \n",
        "params": [{"name":"name: string","desc":"","type":"string"},{"name":"args...: all types","desc":"","type":"all types"}],
        "call": "app.Func(name: string, args...: all types)"
    },
    {
        "name": "GA",
        "kind": "Method",
        "detail": "GA: (command: string, [...fields]: string, options: object)",
        "doc": "With **G**oogle **A**nalytics implemented via analytics.js you can track the use of your apps in real-time and watch as people are using it all over the planet and see what city they are in. You can get lots of usage statistics including what version of your app they are using, what version of Android, the time of day they are using your app, what device they are using and even which parts of the app people are using the most",
        "param": "\n*@param* {string} `command` - create|send|set|require|provide|remove\n\n*@param* {string} `[...fields]` - create|send|set|require|provide|remove\n\n*@param* {object} `options` - create|send|set|require|provide|remove\n",
        "params": [{"name":"command: string","desc":"create|send|set|require|provide|remove","type":"string"},{"name":"[...fields]: string","desc":"create|send|set|require|provide|remove","type":"string"},{"name":"options: object","desc":"create|send|set|require|provide|remove","type":"object"}],
        "call": "app.GA(command: string, [...fields]: string, options: object)"
    },
    {
        "name": "GetAccessibility",
        "kind": "Method",
        "detail": "GetAccessibility: ()",
        "doc": "Returns information about the availability of several accesibility features on the device",
        "param": "",
        "params": [],
        "call": "app.GetAccessibility()"
    },
    {
        "name": "GetAccounts",
        "kind": "Method",
        "detail": "GetAccounts: ()",
        "doc": "Returns a string of all known account names on the device separated with comma ','.",
        "param": "",
        "params": [],
        "call": "app.GetAccounts()"
    },
    {
        "name": "GetActivities",
        "kind": "Method",
        "detail": "GetActivities: ()",
        "doc": "GetActivities returns a list of object of currently running activities.",
        "param": "",
        "params": [],
        "call": "app.GetActivities()"
    },
    {
        "name": "GetAppName",
        "kind": "Method",
        "detail": "GetAppName: ()",
        "doc": "Returns the name of the current app",
        "param": "",
        "params": [],
        "call": "app.GetAppName()"
    },
    {
        "name": "GetAppPath",
        "kind": "Method",
        "detail": "GetAppPath: ()",
        "doc": "Returns the path to the app assets folder. In a DroidScript project the path should be “/sdcard/DroidScript/APPNAME”",
        "param": "",
        "params": [],
        "call": "app.GetAppPath()"
    },
    {
        "name": "GetBatteryLevel",
        "kind": "Method",
        "detail": "GetBatteryLevel: ()",
        "doc": "Returns the current battery level of the device in percent.",
        "param": "",
        "params": [],
        "call": "app.GetBatteryLevel()"
    },
    {
        "name": "GetBluetoothAddress",
        "kind": "Method",
        "detail": "GetBluetoothAddress: ()",
        "doc": "Returns the hexadecimal Bluetooth address of the device, following the pattern “00&colon;00&colon;00&colon;00&colon;00&colon;00”.",
        "param": "",
        "params": [],
        "call": "app.GetBluetoothAddress()"
    },
    {
        "name": "GetBluetoothName",
        "kind": "Method",
        "detail": "GetBluetoothName: ()",
        "doc": "Returns the Bluetooth name of the device.",
        "param": "",
        "params": [],
        "call": "app.GetBluetoothName()"
    },
    {
        "name": "GetBtProfileState",
        "kind": "Method",
        "detail": "GetBtProfileState: (type: string)",
        "doc": "Returns the Bluetooth State of a given Bt connection type.",
        "param": "\n*@param* {string} `type` - a2dp|headset|gatt|health\n",
        "params": [{"name":"type: string","desc":"a2dp|headset|gatt|health","type":"string"}],
        "call": "app.GetBtProfileState(type: string)"
    },
    {
        "name": "GetBuildNum",
        "kind": "Method",
        "detail": "GetBuildNum: ()",
        "doc": "GetBuildNum returns the build number of an APK",
        "param": "",
        "params": [],
        "call": "app.GetBuildNum()"
    },
    {
        "name": "GetChargeType",
        "kind": "Method",
        "detail": "GetChargeType: ()",
        "doc": "Returns the current charge type. If the device isn't charging the result is “None”.",
        "param": "",
        "params": [],
        "call": "app.GetChargeType()"
    },
    {
        "name": "GetClipboardText",
        "kind": "Method",
        "detail": "GetClipboardText: ()",
        "doc": "GetClipboardText returns text that was last copied to the clipboard.",
        "param": "",
        "params": [],
        "call": "app.GetClipboardText()"
    },
    {
        "name": "GetCountry",
        "kind": "Method",
        "detail": "GetCountry: ()",
        "doc": "Returns the name of the device country (ie. “United Kingdom” or “Deutschland”)",
        "param": "",
        "params": [],
        "call": "app.GetCountry()"
    },
    {
        "name": "GetCountryCode",
        "kind": "Method",
        "detail": "GetCountryCode: ()",
        "doc": "Returns the code of the device country (ie. “GB” or “DE”)",
        "param": "",
        "params": [],
        "call": "app.GetCountryCode()"
    },
    {
        "name": "GetData",
        "kind": "Method",
        "detail": "GetData: (name: string)",
        "doc": "Returns data stored via app.SetData(key, value). All data will be lost when the app is closed.",
        "param": "\n*@param* {string} `name` - \n",
        "params": [{"name":"name: string","desc":"","type":"string"}],
        "call": "app.GetData(name: string)"
    },
    {
        "name": "GetDatabaseFolder",
        "kind": "Method",
        "detail": "GetDatabaseFolder: ()",
        "doc": "Returns the path to the database folder of the app. An example pattern is “/data/data/packageName/databases”.",
        "param": "",
        "params": [],
        "call": "app.GetDatabaseFolder()"
    },
    {
        "name": "GetDefaultOrientation",
        "kind": "Method",
        "detail": "GetDefaultOrientation: ()",
        "doc": "Returns the default Orientation of the device. The result modes can be “Portrait” if the device width is smaller than the device height, or “Landscape” vice versa.",
        "param": "",
        "params": [],
        "call": "app.GetDefaultOrientation()"
    },
    {
        "name": "GetDeviceId",
        "kind": "Method",
        "detail": "GetDeviceId: ()",
        "doc": "Returns the alphanumeric ID of the device which is different for each devic",
        "param": "",
        "params": [],
        "call": "app.GetDeviceId()"
    },
    {
        "name": "GetDisplayHeight",
        "kind": "Method",
        "detail": "GetDisplayHeight: ()",
        "doc": "Get the display height of the app in pixels. Therefore the android status bar and virtual buttons won't be included to the value.",
        "param": "",
        "params": [],
        "call": "app.GetDisplayHeight()"
    },
    {
        "name": "GetDisplayWidth",
        "kind": "Method",
        "detail": "GetDisplayWidth: ()",
        "doc": "Get the display width of the app in pixels. Therefore virtual buttons won't be included to the value.",
        "param": "",
        "params": [],
        "call": "app.GetDisplayWidth()"
    },
    {
        "name": "GetDrawerState",
        "kind": "Method",
        "detail": "GetDrawerState: (side: string)",
        "doc": "Returns the current drawer state of a drawer on a given side.",
        "param": "\n*@param* {string} `side` - left|right\n",
        "params": [{"name":"side: string","desc":"left|right","type":"string"}],
        "call": "app.GetDrawerState(side: string)"
    },
    {
        "name": "GetDSVersion",
        "kind": "Method",
        "detail": "GetDSVersion: ()",
        "doc": "Returns the current DroidScript version number in the format 0.00",
        "param": "",
        "params": [],
        "call": "app.GetDSVersion()"
    },
    {
        "name": "GetEnv",
        "kind": "Method",
        "detail": "GetEnv: (name: string)",
        "doc": "Returns the value of an environment variable defined on the device",
        "param": "\n*@param* {string} `name` - PATH|...\n",
        "params": [{"name":"name: string","desc":"PATH|...","type":"string"}],
        "call": "app.GetEnv(name: string)"
    },
    {
        "name": "GetExternalFolder",
        "kind": "Method",
        "detail": "GetExternalFolder: ()",
        "doc": "GetExternalFolder returns the path to the external micro sdcard of the device. Normally it is something like “/storage/extsd” or “/storage/extSdCard”",
        "param": "",
        "params": [],
        "call": "app.GetExternalFolder()"
    },
    {
        "name": "GetFileDate",
        "kind": "Method",
        "detail": "GetFileDate: (file: string)",
        "doc": "GetFileDate returns a Date object containing the last modified date of a file or folder",
        "param": "\n*@param* {string} `file` - String path to file ( “/absolute/...” or “relative/...” )\n",
        "params": [{"name":"file: string","desc":"String path to file ( “/absolute/...” or “relative/...” )","type":"string"}],
        "call": "app.GetFileDate(file: string)"
    },
    {
        "name": "GetFileSize",
        "kind": "Method",
        "detail": "GetFileSize: (file: string)",
        "doc": "GetFileSize returns the size of a file or folder in byte",
        "param": "\n*@param* {string} `file` - String path to file ( “/absolute/...” or “relative/...” )\n",
        "params": [{"name":"file: string","desc":"String path to file ( “/absolute/...” or “relative/...” )","type":"string"}],
        "call": "app.GetFileSize(file: string)"
    },
    {
        "name": "GetFreeSpace",
        "kind": "Method",
        "detail": "GetFreeSpace: (mode: string)",
        "doc": "Returns the free space of the internal or external storage in GigaBytes",
        "param": "\n*@param* {string} `mode` - internal|external\n",
        "params": [{"name":"mode: string","desc":"internal|external","type":"string"}],
        "call": "app.GetFreeSpace(mode: string)"
    },
    {
        "name": "GetInstalledApps",
        "kind": "Method",
        "detail": "GetInstalledApps: ()",
        "doc": "Returns a list of objects containing informations about installed apps.",
        "param": "",
        "params": [],
        "call": "app.GetInstalledApps()"
    },
    {
        "name": "GetIntent",
        "kind": "Method",
        "detail": "GetIntent: ()",
        "doc": "Returns an intent object sent to the app.",
        "param": "",
        "params": [],
        "call": "app.GetIntent()"
    },
    {
        "name": "GetInternalFolder",
        "kind": "Method",
        "detail": "GetInternalFolder: ()",
        "doc": "Get devices internal “/sdcard/” path. Normally it should be “/storage/emulated/legacy”.",
        "param": "",
        "params": [],
        "call": "app.GetInternalFolder()"
    },
    {
        "name": "GetIPAddress",
        "kind": "Method",
        "detail": "GetIPAddress: ()",
        "doc": "GetIPAddress returns the current network ip address. It should look like “0.0.0.0” which is the default value for disabled internet connection. The individual numbers can have values between 0 and 255",
        "param": "",
        "params": [],
        "call": "app.GetIPAddress()"
    },
    {
        "name": "GetJoystickName",
        "kind": "Method",
        "detail": "GetJoystickName: (id: number)",
        "doc": "Returns the name of a conected joystick.",
        "param": "\n*@param* {number} `id` - Number integer\n",
        "params": [{"name":"id: number","desc":"Number integer","type":"number"}],
        "call": "app.GetJoystickName(id: number)"
    },
    {
        "name": "GetJoystickState",
        "kind": "Method",
        "detail": "GetJoystickState: (id: number, key: string)",
        "doc": "Returns the state of a connected joystick. The key can have many values depending on the used controller. The axis-n keys are for different joystick x/y/z axes or the D-Pad - you will best try which key stands for which button with the attached example",
        "param": "\n*@param* {number} `id` - Number integer\n\n*@param* {string} `key` - A|B|C|X|Y|Z|R1|L1|Left|Right|Up|Down|Start|ThumbLeft|ThumbRight|axis-0..9|btn-1..12\n",
        "params": [{"name":"id: number","desc":"Number integer","type":"number"},{"name":"key: string","desc":"A|B|C|X|Y|Z|R1|L1|Left|Right|Up|Down|Start|ThumbLeft|ThumbRight|axis-0..9|btn-1..12","type":"string"}],
        "call": "app.GetJoystickState(id: number, key: string)"
    },
    {
        "name": "GetJoystickStates",
        "kind": "Method",
        "detail": "GetJoystickStates: (id: number)",
        "doc": "Returns an object with all keystates.",
        "param": "\n*@param* {number} `id` - Number integer\n",
        "params": [{"name":"id: number","desc":"Number integer","type":"number"}],
        "call": "app.GetJoystickStates(id: number)"
    },
    {
        "name": "GetKeyboardHeight",
        "kind": "Method",
        "detail": "GetKeyboardHeight: ()",
        "doc": "Returns the height of the device keyboard in pixels. Returns _0_ if the keyboard is hidden.",
        "param": "",
        "params": [],
        "call": "app.GetKeyboardHeight()"
    },
    {
        "name": "GetLanguage",
        "kind": "Method",
        "detail": "GetLanguage: ()",
        "doc": "GetLanguage returns the name of the devices language (ie. “English” or “Deutsch”).",
        "param": "",
        "params": [],
        "call": "app.GetLanguage()"
    },
    {
        "name": "GetAppLanguages",
        "kind": "Method",
        "detail": "GetAppLanguages: ()",
        "doc": "Returns the available translation languages specified in your lang.json file.",
        "param": "",
        "params": [],
        "call": "app.GetAppLanguages()"
    },
    {
        "name": "GetLanguageCode",
        "kind": "Method",
        "detail": "GetLanguageCode: ()",
        "doc": "GetLanguageCode returns the user language code (ie&period; “en” or “de”).",
        "param": "",
        "params": [],
        "call": "app.GetLanguageCode()"
    },
    {
        "name": "GetMacAddress",
        "kind": "Method",
        "detail": "GetMacAddress: ()",
        "doc": "Returns the alphanumeric **M**edia-**A**ccess-**C**ontrol address of the device. Style should be “00&colon;00&colon;00&colon;00&colon;00&colon;00”. The individual numbers can have hexadecimal values between 00 and FF",
        "param": "",
        "params": [],
        "call": "app.GetMacAddress()"
    },
    {
        "name": "GetMediaFile",
        "kind": "Method",
        "detail": "GetMediaFile: (folder: , ext: string)",
        "doc": "Returns a file path to a unique media file matching the format “/storage/emulated/0/Pictures/[**folder**]/**YYYYMMDD**_**hhmmSSsss**[**ext**]”. The folder for this file will be created automatically.",
        "param": "\n*@param* {} `folder` - \n\n*@param* {string} `ext` - \n",
        "params": [{"name":"folder: ","desc":"","type":""},{"name":"ext: string","desc":"","type":"string"}],
        "call": "app.GetMediaFile(folder: , ext: string)"
    },
    {
        "name": "GetMemoryInfo",
        "kind": "Method",
        "detail": "GetMemoryInfo: ()",
        "doc": "Returns an object containing informations about the RAM memory",
        "param": "",
        "params": [],
        "call": "app.GetMemoryInfo()"
    },
    {
        "name": "GetMetadata",
        "kind": "Method",
        "detail": "GetMetadata: (file: string, keys: string)",
        "doc": "Returns a string list of metadata values contained in an audio file.",
        "param": "\n*@param* {string} `file` - String path to file ( “/absolute/...” or “relative/...” )\n\n*@param* {string} `keys` - String comma “,” separated album,artist,genre,title,composer,author,duration,bitrate,width,height\n",
        "params": [{"name":"file: string","desc":"String path to file ( “/absolute/...” or “relative/...” )","type":"string"},{"name":"keys: string","desc":"String comma “,” separated album,artist,genre,title,composer,author,duration,bitrate,width,height","type":"string"}],
        "call": "app.GetMetadata(file: string, keys: string)"
    },
    {
        "name": "GetModel",
        "kind": "Method",
        "detail": "GetModel: ()",
        "doc": "Returns the model name of the device",
        "param": "",
        "params": [],
        "call": "app.GetModel()"
    },
    {
        "name": "GetName",
        "kind": "Method",
        "detail": "GetName: ()",
        "doc": "Returns the name of the APK application. meaning if your app runs in DroidScript, the name will be “DroidScript” as well",
        "param": "",
        "params": [],
        "call": "app.GetName()"
    },
    {
        "name": "GetNotifyId",
        "kind": "Method",
        "detail": "GetNotifyId: ()",
        "doc": "If the app was started by a notification, this function will return the id of that notification.",
        "param": "",
        "params": [],
        "call": "app.GetNotifyId()"
    },
    {
        "name": "GetObjects",
        "kind": "Method",
        "detail": "GetObjects: ()",
        "doc": "Returns a map of DroidScript control objects with their id as key",
        "param": "",
        "params": [],
        "call": "app.GetObjects()"
    },
    {
        "name": "GetOptions",
        "kind": "Method",
        "detail": "GetOptions: ()",
        "doc": "Returns all current app settings. If ran from inside DroidScript, “debug,remote,holo” is the default value.",
        "param": "",
        "params": [],
        "call": "app.GetOptions()"
    },
    {
        "name": "GetOrientation",
        "kind": "Method",
        "detail": "GetOrientation: ()",
        "doc": "Returns the current device orientation. The result modes can be “Portrait” if the device width is smaller than the device height, or “Landscape” vice versa.",
        "param": "",
        "params": [],
        "call": "app.GetOrientation()"
    },
    {
        "name": "GetOSVersion",
        "kind": "Method",
        "detail": "GetOSVersion: ()",
        "doc": "GetOSVersion returns the API target level  of the android version",
        "param": "",
        "params": [],
        "call": "app.GetOSVersion()"
    },
    {
        "name": "GetPackageName",
        "kind": "Method",
        "detail": "GetPackageName: ()",
        "doc": "Returns the package name of the APK",
        "param": "",
        "params": [],
        "call": "app.GetPackageName()"
    },
    {
        "name": "GetPairedBtDevices",
        "kind": "Method",
        "detail": "GetPairedBtDevices: ()",
        "doc": "Returns a list of objects containing the name and bluetooth address of paired devices. Note that Bluetooth must be turned on to receive this information.",
        "param": "",
        "params": [],
        "call": "app.GetPairedBtDevices()"
    },
    {
        "name": "GetPath",
        "kind": "Method",
        "detail": "GetPath: ()",
        "doc": "Returns the path to the local storage folder of the APK.",
        "param": "",
        "params": [],
        "call": "app.GetPath()"
    },
    {
        "name": "GetPermission",
        "kind": "Method",
        "detail": "GetPermission: (type: string, callback: function)",
        "doc": "GetPermission accepts a list of 'dangerus' classified permissions and returns a list of ungranted permissions in the **callback** function, or in case of only “ExtSDCard” the path URI of the user-selected folder.",
        "param": "\n*@param* {string} `type` - String comma “,” separated Camera|ExtSDcard|External|Internal|Network|Storage|Overlay|SMS|Location|Calendar|Body|Contacts|Record|Phone|Biometric|Accounts|License|usb:<pid:num>\n\n*@param* {function} `callback` - String comma “,” separated Camera|ExtSDcard|External|Internal|Network|Storage|Overlay|SMS|Location|Calendar|Body|Contacts|Record|Phone|Biometric|Accounts|License|usb:<pid:num>\n",
        "params": [{"name":"type: string","desc":"String comma “,” separated Camera|ExtSDcard|External|Internal|Network|Storage|Overlay|SMS|Location|Calendar|Body|Contacts|Record|Phone|Biometric|Accounts|License|usb:<pid:num>","type":"string"},{"name":"callback: function","desc":"String comma “,” separated Camera|ExtSDcard|External|Internal|Network|Storage|Overlay|SMS|Location|Calendar|Body|Contacts|Record|Phone|Biometric|Accounts|License|usb:<pid:num>","type":"function"}],
        "call": "app.GetPermission(type: string, callback: function)"
    },
    {
        "name": "GetPrivateFolder",
        "kind": "Method",
        "detail": "GetPrivateFolder: (name: string, options: string)",
        "doc": "Returns the path to a folder located in the apps private space which is normally not accessible by other apps or the user himself.",
        "param": "\n*@param* {string} `name` - \n\n*@param* {string} `options` - external\n",
        "params": [{"name":"name: string","desc":"","type":"string"},{"name":"options: string","desc":"external","type":"string"}],
        "call": "app.GetPrivateFolder(name: string, options: string)"
    },
    {
        "name": "GetResourceId",
        "kind": "Method",
        "detail": "GetResourceId: (name: string, options: string)",
        "doc": "Returns the id of a resource.",
        "param": "\n*@param* {string} `name` - \n\n*@param* {string} `options` - android\n",
        "params": [{"name":"name: string","desc":"","type":"string"},{"name":"options: string","desc":"android","type":"string"}],
        "call": "app.GetResourceId(name: string, options: string)"
    },
    {
        "name": "GetRingerMode",
        "kind": "Method",
        "detail": "GetRingerMode: ()",
        "doc": "Returns the current ringer mode of the device which can be “Normal”, “Vibrate” or “Silent”.",
        "param": "",
        "params": [],
        "call": "app.GetRingerMode()"
    },
    {
        "name": "GetRotation",
        "kind": "Method",
        "detail": "GetRotation: ()",
        "doc": "Returns the current rotation of the device around it's Z-Axis in 90 degree steps. The values are relative to the initial orientation of the device on startup.",
        "param": "",
        "params": [],
        "call": "app.GetRotation()"
    },
    {
        "name": "GetRouterAddress",
        "kind": "Method",
        "detail": "GetRouterAddress: ()",
        "doc": "Returns the routers ip address. (Its typically your own IP but ending with a .1, ie. 192.168.178.1",
        "param": "",
        "params": [],
        "call": "app.GetRouterAddress()"
    },
    {
        "name": "GetRSSI",
        "kind": "Method",
        "detail": "GetRSSI: ()",
        "doc": "Returns the current _**R**eceived **S**ignal **S**trength **I**ndication_ which is a measurement of the power present in a received WiFi signal in dBm (decibel milliwatt)",
        "param": "",
        "params": [],
        "call": "app.GetRSSI()"
    },
    {
        "name": "GetRunningApps",
        "kind": "Method",
        "detail": "GetRunningApps: ()",
        "doc": "Returns a list of objects containing info about all currently running apps in the fore- or background.",
        "param": "",
        "params": [],
        "call": "app.GetRunningApps()"
    },
    {
        "name": "GetRunningServices",
        "kind": "Method",
        "detail": "GetRunningServices: ()",
        "doc": "Returns a list of objects containing info about all currently running services in the background.",
        "param": "",
        "params": [],
        "call": "app.GetRunningServices()"
    },
    {
        "name": "GetScreenDensity",
        "kind": "Method",
        "detail": "GetScreenDensity: ()",
        "doc": "Returns the density of the device's screen.",
        "param": "",
        "params": [],
        "call": "app.GetScreenDensity()"
    },
    {
        "name": "GetScreenHeight",
        "kind": "Method",
        "detail": "GetScreenHeight: (options: string)",
        "doc": "Returns the total screen height of the device in pixels. With the 'Real' **option** softkeys will be included in the value.",
        "param": "\n*@param* {string} `options` - Real\n",
        "params": [{"name":"options: string","desc":"Real","type":"string"}],
        "call": "app.GetScreenHeight(options: string)"
    },
    {
        "name": "GetScreenWidth",
        "kind": "Method",
        "detail": "GetScreenWidth: (options: string)",
        "doc": "Returns the total screen width of the device in pixels. With the 'Real' **option** softkeys will be included in the value.",
        "param": "\n*@param* {string} `options` - Real\n",
        "params": [{"name":"options: string","desc":"Real","type":"string"}],
        "call": "app.GetScreenWidth(options: string)"
    },
    {
        "name": "GetSharedFiles",
        "kind": "Method",
        "detail": "GetSharedFiles: ()",
        "doc": "Returns a path list of files shared with the app. If the results were retreived they can't be read an other time, unless they will be shared again.",
        "param": "",
        "params": [],
        "call": "app.GetSharedFiles()"
    },
    {
        "name": "GetSharedText",
        "kind": "Method",
        "detail": "GetSharedText: ()",
        "doc": "Returns the value of a shared text. If the result is returned, it cannot be read another time unless it is shared again.",
        "param": "",
        "params": [],
        "call": "app.GetSharedText()"
    },
    {
        "name": "GetSpeechEngines",
        "kind": "Method",
        "detail": "GetSpeechEngines: ()",
        "doc": "Returns a list of installed tts engines.",
        "param": "",
        "params": [],
        "call": "app.GetSpeechEngines()"
    },
    {
        "name": "GetSpeakerPhone",
        "kind": "Method",
        "detail": "GetSpeakerPhone: ()",
        "doc": "Checks if the speaker is enabled for phone calls. Returns false if no call is active.",
        "param": "",
        "params": [],
        "call": "app.GetSpeakerPhone()"
    },
    {
        "name": "GetSpecialFolder",
        "kind": "Method",
        "detail": "GetSpecialFolder: (name: string)",
        "doc": "Returns the full path to a special folder commonly used for images, videos, music etc.",
        "param": "\n*@param* {string} `name` - DCIM|Pictures|Movies|Downloads|Music\n",
        "params": [{"name":"name: string","desc":"DCIM|Pictures|Movies|Downloads|Music","type":"string"}],
        "call": "app.GetSpecialFolder(name: string)"
    },
    {
        "name": "GetSSID",
        "kind": "Method",
        "detail": "GetSSID: ()",
        "doc": "Returns the name (SSID) of the current network the user is connected with. If WiFi is disabled “<unknown ssid>” is returned.",
        "param": "",
        "params": [],
        "call": "app.GetSSID()"
    },
    {
        "name": "GetTextBounds",
        "kind": "Method",
        "detail": "GetTextBounds: (txt: string, size: number, width: number, obj: appobject)",
        "doc": "Calculates text dimensions based on a specific control or with default setting",
        "param": "\n*@param* {string} `txt` - \n\n*@param* {number} `size` - \n\n*@param* {number} `width` - Number fraction (0..1)\n\n*@param* {appobject} `obj` - Number fraction (0..1)\n",
        "params": [{"name":"txt: string","desc":"","type":"string"},{"name":"size: number","desc":"","type":"number"},{"name":"width: number","desc":"Number fraction (0..1)","type":"number"},{"name":"obj: appobject","desc":"Number fraction (0..1)","type":"appobject"}],
        "call": "app.GetTextBounds(txt: string, size: number, width: number, obj: appobject)"
    },
    {
        "name": "GetThemeInfo",
        "kind": "Method",
        "detail": "GetThemeInfo: ()",
        "doc": "Returns the configuration of the current theme",
        "param": "",
        "params": [],
        "call": "app.GetThemeInfo()"
    },
    {
        "name": "GetThumbnail",
        "kind": "Method",
        "detail": "GetThumbnail: (source: string, destination: string, width: number, height: number)",
        "doc": "Creates a downscaled copy of an existing image. Pass -1 as width or height to keep the aspect ratio.",
        "param": "\n*@param* {string} `source` - String path to file or folder ( “/absolute/...” or “relative/...” )\n\n*@param* {string} `destination` - String path to file or folder ( “/absolute/...” or “relative/...” )\n\n*@param* {number} `width` - Number pixel\n\n*@param* {number} `height` - Number pixel\n",
        "params": [{"name":"source: string","desc":"String path to file or folder ( “/absolute/...” or “relative/...” )","type":"string"},{"name":"destination: string","desc":"String path to file or folder ( “/absolute/...” or “relative/...” )","type":"string"},{"name":"width: number","desc":"Number pixel","type":"number"},{"name":"height: number","desc":"Number pixel","type":"number"}],
        "call": "app.GetThumbnail(source: string, destination: string, width: number, height: number)"
    },
    {
        "name": "GetTop",
        "kind": "Method",
        "detail": "GetTop: (options: string)",
        "doc": "Returns the upper border distance from the app display to the device screen as height relative float or in pixels with the **px** option",
        "param": "\n*@param* {string} `options` - px\n",
        "params": [{"name":"options: string","desc":"px","type":"string"}],
        "call": "app.GetTop(options: string)"
    },
    {
        "name": "GetType",
        "kind": "Method",
        "detail": "GetType: ()",
        "doc": "Returns the object class name",
        "param": "",
        "params": [],
        "call": "app.GetType()"
    },
    {
        "name": "GetUser",
        "kind": "Method",
        "detail": "GetUser: ()",
        "doc": "Returns the email-address of the currently active user account.",
        "param": "",
        "params": [],
        "call": "app.GetUser()"
    },
    {
        "name": "GetVersion",
        "kind": "Method",
        "detail": "GetVersion: ()",
        "doc": "Returns the app version number of the currently running apk",
        "param": "",
        "params": [],
        "call": "app.GetVersion()"
    },
    {
        "name": "GetVolume",
        "kind": "Method",
        "detail": "GetVolume: (stream: string)",
        "doc": "Returns the volume level of a given audio type as a number between 0 and 1. By default the “System” volume is returned.",
        "param": "\n*@param* {string} `stream` - alarm|dtmf|music|notification|ring|system|voicecall\n",
        "params": [{"name":"stream: string","desc":"alarm|dtmf|music|notification|ring|system|voicecall","type":"string"}],
        "call": "app.GetVolume(stream: string)"
    },
    {
        "name": "GoToSleep",
        "kind": "Method",
        "detail": "GoToSleep: ()",
        "doc": "Forces the screen to turn off and puts the device to sleep. (This has the same effect as pressing the power button)",
        "param": "",
        "params": [],
        "call": "app.GoToSleep()"
    },
    {
        "name": "HasSoftNav",
        "kind": "Method",
        "detail": "HasSoftNav: ()",
        "doc": "Checks if the device has a soft navigation bar on the screen",
        "param": "",
        "params": [],
        "call": "app.HasSoftNav()"
    },
    {
        "name": "Hide",
        "kind": "Method",
        "detail": "Hide: ()",
        "doc": "Hides the main app layout in order to save performance when (re)creating controls.",
        "param": "",
        "params": [],
        "call": "app.Hide()"
    },
    {
        "name": "HideKeyboard",
        "kind": "Method",
        "detail": "HideKeyboard: ()",
        "doc": "Hides the device keyboard if it is currently shown.",
        "param": "",
        "params": [],
        "call": "app.HideKeyboard()"
    },
    {
        "name": "HideProgress",
        "kind": "Method",
        "detail": "HideProgress: ()",
        "doc": "Hides a previously shown progress indicator.",
        "param": "",
        "params": [],
        "call": "app.HideProgress()"
    },
    {
        "name": "HideProgressBar",
        "kind": "Method",
        "detail": "HideProgressBar: ()",
        "doc": "Hides a previously shown progress bar dialog.",
        "param": "",
        "params": [],
        "call": "app.HideProgressBar()"
    },
    {
        "name": "HttpRequest",
        "kind": "Method",
        "detail": "HttpRequest: (type: string, baseUrl: string, path: string, params: string, callback: function, headers: string)",
        "doc": "HttpRequest sends a request to a server. baseUrl and path will just be added to one string to get the address.",
        "param": "\n*@param* {string} `type` - GET:retrieve data|POST:submit data|JSON:post json data|PUT:replace target resource|DELETE:deletes the resource|HEAD:omit body\n\n*@param* {string} `baseUrl` - String url path\n\n*@param* {string} `path` - String url path\n\n*@param* {string} `params` - String url path\n\n*@param* {function} `callback` - String url path\n\n*@param* {string} `headers` - String url path\n",
        "params": [{"name":"type: string","desc":"GET:retrieve data|POST:submit data|JSON:post json data|PUT:replace target resource|DELETE:deletes the resource|HEAD:omit body","type":"string"},{"name":"baseUrl: string","desc":"String url path","type":"string"},{"name":"path: string","desc":"String url path","type":"string"},{"name":"params: string","desc":"String url path","type":"string"},{"name":"callback: function","desc":"String url path","type":"function"},{"name":"headers: string","desc":"String url path","type":"string"}],
        "call": "app.HttpRequest(type: string, baseUrl: string, path: string, params: string, callback: function, headers: string)"
    },
    {
        "name": "InIDE",
        "kind": "Method",
        "detail": "InIDE: ()",
        "doc": "",
        "param": "",
        "params": [],
        "call": "app.InIDE()"
    },
    {
        "name": "InstallWallpaper",
        "kind": "Method",
        "detail": "InstallWallpaper: (packageName: string, className: string)",
        "doc": "Let the user install a device wallpaper located in the 'Wallpaper.js' script in the project root folder.",
        "param": "\n*@param* {string} `packageName` - this\n\n*@param* {string} `className` - this\n",
        "params": [{"name":"packageName: string","desc":"this","type":"string"},{"name":"className: string","desc":"this","type":"string"}],
        "call": "app.InstallWallpaper(packageName: string, className: string)"
    },
    {
        "name": "InstallApp",
        "kind": "Method",
        "detail": "InstallApp: (apkFile: string, callback: function, options: string)",
        "doc": "Starts the installation process of an apk file from your local drive",
        "param": "\n*@param* {string} `apkFile` - String path to file ( “/absolute/...” or “relative/...” )\n\n*@param* {function} `callback` - String path to file ( “/absolute/...” or “relative/...” )\n\n*@param* {string} `options` - String path to file ( “/absolute/...” or “relative/...” )\n",
        "params": [{"name":"apkFile: string","desc":"String path to file ( “/absolute/...” or “relative/...” )","type":"string"},{"name":"callback: function","desc":"String path to file ( “/absolute/...” or “relative/...” )","type":"function"},{"name":"options: string","desc":"String path to file ( “/absolute/...” or “relative/...” )","type":"string"}],
        "call": "app.InstallApp(apkFile: string, callback: function, options: string)"
    },
    {
        "name": "IsAPK",
        "kind": "Method",
        "detail": "IsAPK: ()",
        "doc": "Returns whether current app is an APK or not (case not it's a DroidScript Project)",
        "param": "",
        "params": [],
        "call": "app.IsAPK()"
    },
    {
        "name": "IsAppInstalled",
        "kind": "Method",
        "detail": "IsAppInstalled: (packageName: string)",
        "doc": "Checks if an app given by a package name is installed.",
        "param": "\n*@param* {string} `packageName` - \n",
        "params": [{"name":"packageName: string","desc":"","type":"string"}],
        "call": "app.IsAppInstalled(packageName: string)"
    },
    {
        "name": "IsBluetoothEnabled",
        "kind": "Method",
        "detail": "IsBluetoothEnabled: ()",
        "doc": "Return whether bluetooth was enabled. ",
        "param": "",
        "params": [],
        "call": "app.IsBluetoothEnabled()"
    },
    {
        "name": "IsBluetoothOn",
        "kind": "Method",
        "detail": "IsBluetoothOn: ()",
        "doc": "Checks if bluetooth is enabled and on.",
        "param": "",
        "params": [],
        "call": "app.IsBluetoothOn()"
    },
    {
        "name": "IsBtDevicePaired",
        "kind": "Method",
        "detail": "IsBtDevicePaired: (name: string)",
        "doc": "Checks if a given bluetooth device was paired with the user device.",
        "param": "\n*@param* {string} `name` - \n",
        "params": [{"name":"name: string","desc":"","type":"string"}],
        "call": "app.IsBtDevicePaired(name: string)"
    },
    {
        "name": "IsCharging",
        "kind": "Method",
        "detail": "IsCharging: ()",
        "doc": "Checks if phone is currently charging or not.",
        "param": "",
        "params": [],
        "call": "app.IsCharging()"
    },
    {
        "name": "IsChrome",
        "kind": "Method",
        "detail": "IsChrome: ()",
        "doc": "Checks if the device is running on ChromeOS.",
        "param": "",
        "params": [],
        "call": "app.IsChrome()"
    },
    {
        "name": "IsConnected",
        "kind": "Method",
        "detail": "IsConnected: ()",
        "doc": "Checks if the device is connected to any network.",
        "param": "",
        "params": [],
        "call": "app.IsConnected()"
    },
    {
        "name": "IsDebugging",
        "kind": "Method",
        "detail": "IsDebugging: ()",
        "doc": "Checks if the app is currently debugging.",
        "param": "",
        "params": [],
        "call": "app.IsDebugging()"
    },
    {
        "name": "IsFolder",
        "kind": "Method",
        "detail": "IsFolder: (folder: string)",
        "doc": "Checks if the passed fs path leads to a folder.",
        "param": "\n*@param* {string} `folder` - String path to folder ( “/absolute/...” or “relative/...” )\n",
        "params": [{"name":"folder: string","desc":"String path to folder ( “/absolute/...” or “relative/...” )","type":"string"}],
        "call": "app.IsFolder(folder: string)"
    },
    {
        "name": "IsKeyboardShown",
        "kind": "Method",
        "detail": "IsKeyboardShown: ()",
        "doc": "Checks if the device keyboard is currently visible or not.",
        "param": "",
        "params": [],
        "call": "app.IsKeyboardShown()"
    },
    {
        "name": "IsLocationEnabled",
        "kind": "Method",
        "detail": "IsLocationEnabled: (mode: string)",
        "doc": "Checks if a specific location mode was enabled.",
        "param": "\n*@param* {string} `mode` - GPS|Network\n",
        "params": [{"name":"mode: string","desc":"GPS|Network","type":"string"}],
        "call": "app.IsLocationEnabled(mode: string)"
    },
    {
        "name": "IsNavBarOnRight",
        "kind": "Method",
        "detail": "IsNavBarOnRight: ()",
        "doc": "Checks if the Navigation Bar is on the righthand side of the display",
        "param": "",
        "params": [],
        "call": "app.IsNavBarOnRight()"
    },
    {
        "name": "IsNewVersion",
        "kind": "Method",
        "detail": "IsNewVersion: ()",
        "doc": "Checks if the apk version number increased compared to the last time started",
        "param": "",
        "params": [],
        "call": "app.IsNewVersion()"
    },
    {
        "name": "IsPortrait",
        "kind": "Method",
        "detail": "IsPortrait: ()",
        "doc": "Checks if the device is in portrait mode",
        "param": "",
        "params": [],
        "call": "app.IsPortrait()"
    },
    {
        "name": "IsPremium",
        "kind": "Method",
        "detail": "IsPremium: ()",
        "doc": "Checks if the user has a DroidScript premium subscription inside the IDE",
        "param": "",
        "params": [],
        "call": "app.IsPremium()"
    },
    {
        "name": "IsScoped",
        "kind": "Method",
        "detail": "IsScoped: ()",
        "doc": "Indicates 'scoped storage' on Android 10",
        "param": "",
        "params": [],
        "call": "app.IsScoped()"
    },
    {
        "name": "IsScreenOn",
        "kind": "Method",
        "detail": "IsScreenOn: ()",
        "doc": "Checks if the device screen is currently on",
        "param": "",
        "params": [],
        "call": "app.IsScreenOn()"
    },
    {
        "name": "IsService",
        "kind": "Method",
        "detail": "IsService: ()",
        "doc": "Checks if the currently running app instance is a service",
        "param": "",
        "params": [],
        "call": "app.IsService()"
    },
    {
        "name": "IsStarted",
        "kind": "Method",
        "detail": "IsStarted: ()",
        "doc": "Checks if the app has finished loading. It will return true after OnStart has returned",
        "param": "",
        "params": [],
        "call": "app.IsStarted()"
    },
    {
        "name": "IsTablet",
        "kind": "Method",
        "detail": "IsTablet: ()",
        "doc": "Checks if the user device is a tablet.",
        "param": "",
        "params": [],
        "call": "app.IsTablet()"
    },
    {
        "name": "IsTV",
        "kind": "Method",
        "detail": "IsTV: ()",
        "doc": "Checks if the OS is AndroidThings.",
        "param": "",
        "params": [],
        "call": "app.IsTV()"
    },
    {
        "name": "IsWifiApEnabled",
        "kind": "Method",
        "detail": "IsWifiApEnabled: ()",
        "doc": "Checks if the mobile Wifi Access Point is enabled on the user device.",
        "param": "",
        "params": [],
        "call": "app.IsWifiApEnabled()"
    },
    {
        "name": "IsWifiEnabled",
        "kind": "Method",
        "detail": "IsWifiEnabled: ()",
        "doc": "Checks if Wifi is enabled on the user device.",
        "param": "",
        "params": [],
        "call": "app.IsWifiEnabled()"
    },
    {
        "name": "KillApp",
        "kind": "Method",
        "detail": "KillApp: (pid: number)",
        "doc": "Kills a running app by its process ID. You can retreive a list of all running apps with their pids using the @GetRunningApps function of the **app** object",
        "param": "\n*@param* {number} `pid` - Number integer\n",
        "params": [{"name":"pid: number","desc":"Number integer","type":"number"}],
        "call": "app.KillApp(pid: number)"
    },
    {
        "name": "GetAppLangCode",
        "kind": "Method",
        "detail": "GetAppLangCode: (name: string)",
        "doc": "Convert the user language name to it's 2 character long language code. If no argument is passed, the current language code is returned.",
        "param": "\n*@param* {string} `name` - \n",
        "params": [{"name":"name: string","desc":"","type":"string"}],
        "call": "app.GetAppLangCode(name: string)"
    },
    {
        "name": "LaunchApp",
        "kind": "Method",
        "detail": "LaunchApp: (packageName: string, noPlay: )",
        "doc": "Launches an app if installed or search for it on GooglePlay otherwise",
        "param": "\n*@param* {string} `packageName` - \n\n*@param* {} `noPlay` - \n",
        "params": [{"name":"packageName: string","desc":"","type":"string"},{"name":"noPlay: ","desc":"","type":""}],
        "call": "app.LaunchApp(packageName: string, noPlay: )"
    },
    {
        "name": "ListFolder",
        "kind": "Method",
        "detail": "ListFolder: (path: string, filter: string, limit: number, options: string)",
        "doc": "The ListFolder method returns a list of all files and folders in a given folder",
        "param": "\n*@param* {string} `path` - String path to file or folder ( “/absolute/...” or “relative/...” )\n\n*@param* {string} `filter` - String path to file or folder ( “/absolute/...” or “relative/...” )\n\n*@param* {number} `limit` - Number integer\n\n*@param* {string} `options` - String comma “,” separated Alphasort:sorts the paths in alphabetical order,FullPath:returns absolute paths to the listed items,RegEx:accepts regexp patterns,Folders:list folders only,Files:list files only,NoEmpty:hide empty folders,project:Shows DS project folders only\n",
        "params": [{"name":"path: string","desc":"String path to file or folder ( “/absolute/...” or “relative/...” )","type":"string"},{"name":"filter: string","desc":"String path to file or folder ( “/absolute/...” or “relative/...” )","type":"string"},{"name":"limit: number","desc":"Number integer","type":"number"},{"name":"options: string","desc":"String comma “,” separated Alphasort:sorts the paths in alphabetical order,FullPath:returns absolute paths to the listed items,RegEx:accepts regexp patterns,Folders:list folders only,Files:list files only,NoEmpty:hide empty folders,project:Shows DS project folders only","type":"string"}],
        "call": "app.ListFolder(path: string, filter: string, limit: number, options: string)"
    },
    {
        "name": "ListPermissions",
        "kind": "Method",
        "detail": "ListPermissions: (type: string)",
        "doc": "Returns a list of granted permission",
        "param": "\n*@param* {string} `type` - storage\n",
        "params": [{"name":"type: string","desc":"storage","type":"string"}],
        "call": "app.ListPermissions(type: string)"
    },
    {
        "name": "LoadBoolean",
        "kind": "Method",
        "detail": "LoadBoolean: (name: string, default: boolean, file: string)",
        "doc": "Load a saved boolean value to remember varibale values between multiple app starts.",
        "param": "\n*@param* {string} `name` - \n\n*@param* {boolean} `default` - \n\n*@param* {string} `file` - String path to file ( “/absolute/...” or “relative/...” )\n",
        "params": [{"name":"name: string","desc":"","type":"string"},{"name":"default: boolean","desc":"","type":"boolean"},{"name":"file: string","desc":"String path to file ( “/absolute/...” or “relative/...” )","type":"string"}],
        "call": "app.LoadBoolean(name: string, default: boolean, file: string)"
    },
    {
        "name": "LoadNumber",
        "kind": "Method",
        "detail": "LoadNumber: (name: string, default: number, file: string)",
        "doc": "Load a saved number value to remember varibale values between multiple app starts.",
        "param": "\n*@param* {string} `name` - \n\n*@param* {number} `default` - \n\n*@param* {string} `file` - String path to file ( “/absolute/...” or “relative/...” )\n",
        "params": [{"name":"name: string","desc":"","type":"string"},{"name":"default: number","desc":"","type":"number"},{"name":"file: string","desc":"String path to file ( “/absolute/...” or “relative/...” )","type":"string"}],
        "call": "app.LoadNumber(name: string, default: number, file: string)"
    },
    {
        "name": "LoadJson",
        "kind": "Method",
        "detail": "LoadJson: (name: string, default: object, file: string)",
        "doc": "Load a saved json object to remember varibale values between multiple app starts.",
        "param": "\n*@param* {string} `name` - \n\n*@param* {object} `default` - \n\n*@param* {string} `file` - String path to file ( “/absolute/...” or “relative/...” )\n",
        "params": [{"name":"name: string","desc":"","type":"string"},{"name":"default: object","desc":"","type":"object"},{"name":"file: string","desc":"String path to file ( “/absolute/...” or “relative/...” )","type":"string"}],
        "call": "app.LoadJson(name: string, default: object, file: string)"
    },
    {
        "name": "LoadPlugin",
        "kind": "Method",
        "detail": "LoadPlugin: (url: string)",
        "doc": "Import an installed plugin to your app. You can download plugins from [DroidScript's plugin page](http://droidscript.org/plugins/), [Google Playstore](https://play.google.com/store/search?q=DroidScript+Plugin) or you can create self-written plugins",
        "param": "\n*@param* {string} `url` - String url path\n",
        "params": [{"name":"url: string","desc":"String url path","type":"string"}],
        "call": "app.LoadPlugin(url: string)"
    },
    {
        "name": "LoadScript",
        "kind": "Method",
        "detail": "LoadScript: (path: string, callback: function)",
        "doc": "Loads a local JavaScript file asynchronously to your app to make its functionality available in your app.",
        "param": "\n*@param* {string} `path` - String path to file or folder ( “/absolute/...” or “relative/...” )\n\n*@param* {function} `callback` - String path to file or folder ( “/absolute/...” or “relative/...” )\n",
        "params": [{"name":"path: string","desc":"String path to file or folder ( “/absolute/...” or “relative/...” )","type":"string"},{"name":"callback: function","desc":"String path to file or folder ( “/absolute/...” or “relative/...” )","type":"function"}],
        "call": "app.LoadScript(path: string, callback: function)"
    },
    {
        "name": "LoadText",
        "kind": "Method",
        "detail": "LoadText: (name: string, default: string, file: string)",
        "doc": "Load saved text value to remember varibale values between multiple app starts.",
        "param": "\n*@param* {string} `name` - \n\n*@param* {string} `default` - \n\n*@param* {string} `file` - String path to file ( “/absolute/...” or “relative/...” )\n",
        "params": [{"name":"name: string","desc":"","type":"string"},{"name":"default: string","desc":"","type":"string"},{"name":"file: string","desc":"String path to file ( “/absolute/...” or “relative/...” )","type":"string"}],
        "call": "app.LoadText(name: string, default: string, file: string)"
    },
    {
        "name": "Lock",
        "kind": "Method",
        "detail": "Lock: ()",
        "doc": "Locks the device.",
        "param": "",
        "params": [],
        "call": "app.Lock()"
    },
    {
        "name": "LockDrawer",
        "kind": "Method",
        "detail": "LockDrawer: (side: string)",
        "doc": "Make drawer on a specific side unaccessible for the app and the user, hiding it if necessary. You can only unlock it using the @UnlockDrawer method.",
        "param": "\n*@param* {string} `side` - left|right\n",
        "params": [{"name":"side: string","desc":"left|right","type":"string"}],
        "call": "app.LockDrawer(side: string)"
    },
    {
        "name": "MakeFolder",
        "kind": "Method",
        "detail": "MakeFolder: (folder: string)",
        "doc": "Creates a new folder in the local filesystem recursively.",
        "param": "\n*@param* {string} `folder` - String path to folder ( “/absolute/...” or “relative/...” )\n",
        "params": [{"name":"folder: string","desc":"String path to folder ( “/absolute/...” or “relative/...” )","type":"string"}],
        "call": "app.MakeFolder(folder: string)"
    },
    {
        "name": "OpenDatabase",
        "kind": "Method",
        "detail": "OpenDatabase: (name: string)",
        "doc": "OpenDatabase creates or opens a local database in which large amounts of data can be stored that can still be queried in a reasonable amount of time",
        "param": "\n*@param* {string} `name` - \n",
        "params": [{"name":"name: string","desc":"","type":"string"}],
        "call": "app.OpenDatabase(name: string)"
    },
    {
        "name": "OpenDrawer",
        "kind": "Method",
        "detail": "OpenDrawer: (side: string)",
        "doc": "Opens the drawer layout on the given side with slide animation.",
        "param": "\n*@param* {string} `side` - left|right\n",
        "params": [{"name":"side: string","desc":"left|right","type":"string"}],
        "call": "app.OpenDrawer(side: string)"
    },
    {
        "name": "OpenFile",
        "kind": "Method",
        "detail": "OpenFile: (file: string, type: string, choose: string)",
        "doc": "Allows the user to open a file with an external application on the device. The **choose** parameter shows the user a custom message in the choose dialog.",
        "param": "\n*@param* {string} `file` - String path to file ( “/absolute/...” or “relative/...” )\n\n*@param* {string} `type` - String mimetype\n\n*@param* {string} `choose` - String mimetype\n",
        "params": [{"name":"file: string","desc":"String path to file ( “/absolute/...” or “relative/...” )","type":"string"},{"name":"type: string","desc":"String mimetype","type":"string"},{"name":"choose: string","desc":"String mimetype","type":"string"}],
        "call": "app.OpenFile(file: string, type: string, choose: string)"
    },
    {
        "name": "OpenUrl",
        "kind": "Method",
        "detail": "OpenUrl: (url: string, type: string, choose: string)",
        "doc": "Allows the user to open an url with an external application on the device. The **choose** parameter shows the user a custom message in the choose dialog.",
        "param": "\n*@param* {string} `url` - String url path\n\n*@param* {string} `type` - String mimetype\n\n*@param* {string} `choose` - String mimetype\n",
        "params": [{"name":"url: string","desc":"String url path","type":"string"},{"name":"type: string","desc":"String mimetype","type":"string"},{"name":"choose: string","desc":"String mimetype","type":"string"}],
        "call": "app.OpenUrl(url: string, type: string, choose: string)"
    },
    {
        "name": "Path2Uri",
        "kind": "Method",
        "detail": "Path2Uri: (path: string)",
        "doc": "Returns a content:// path for images and video",
        "param": "\n*@param* {string} `path` - String path to file or folder ( “/absolute/...” or “relative/...” )\n",
        "params": [{"name":"path: string","desc":"String path to file or folder ( “/absolute/...” or “relative/...” )","type":"string"}],
        "call": "app.Path2Uri(path: string)"
    },
    {
        "name": "PairBtDevice",
        "kind": "Method",
        "detail": "PairBtDevice: (address: string, callback: function)",
        "doc": "Pairs a bluetooth device with yours.",
        "param": "\n*@param* {string} `address` - \n\n*@param* {function} `callback` - \n",
        "params": [{"name":"address: string","desc":"","type":"string"},{"name":"callback: function","desc":"","type":"function"}],
        "call": "app.PairBtDevice(address: string, callback: function)"
    },
    {
        "name": "PinScreen",
        "kind": "Method",
        "detail": "PinScreen: (enable: boolean)",
        "doc": "Pins the app on the scree",
        "param": "\n*@param* {boolean} `enable` - \n",
        "params": [{"name":"enable: boolean","desc":"","type":"boolean"}],
        "call": "app.PinScreen(enable: boolean)"
    },
    {
        "name": "PlayRingtone",
        "kind": "Method",
        "detail": "PlayRingtone: (type: string)",
        "doc": "Play a specific ringtone type based on the users device settings for ringtones. _Type_ can be “Alarm”, “Notification” or “Ringtone”",
        "param": "\n*@param* {string} `type` - Alarm|Notification|Ringtone\n",
        "params": [{"name":"type: string","desc":"Alarm|Notification|Ringtone","type":"string"}],
        "call": "app.PlayRingtone(type: string)"
    },
    {
        "name": "PlaySound",
        "kind": "Method",
        "detail": "PlaySound: (file: )",
        "doc": "Plays a sound file stored remotely or on the local filesystem.",
        "param": "\n*@param* {} `file` - \n",
        "params": [{"name":"file: ","desc":"","type":""}],
        "call": "app.PlaySound(file: )"
    },
    {
        "name": "PreventScreenLock",
        "kind": "Method",
        "detail": "PreventScreenLock: (mode: )",
        "doc": "The _PreventScreenLock_ method prevents the device screen from dimming and locking while your app is in the foreground",
        "param": "\n*@param* {} `mode` - Full:Device can sleep, Screen and Keyboard on|Partial:CPU always on, Screen and Keyboard off\n",
        "params": [{"name":"mode: ","desc":"Full:Device can sleep, Screen and Keyboard on|Partial:CPU always on, Screen and Keyboard off","type":""}],
        "call": "app.PreventScreenLock(mode: )"
    },
    {
        "name": "PreventWifiSleep",
        "kind": "Method",
        "detail": "PreventWifiSleep: ()",
        "doc": "Prevent the device WiFi from powering down.",
        "param": "",
        "params": [],
        "call": "app.PreventWifiSleep()"
    },
    {
        "name": "QueryContent",
        "kind": "Method",
        "detail": "QueryContent: (uri: string, columns: string, select: string, args: list, sort: string)",
        "doc": "Queries content from the android content model. The **uri** typically have the syntax “content://authority/path/id”. You can find more infos about it on the [Android Developer page](https://developer.android.com/reference/android/content/ContentUris)",
        "param": "\n*@param* {string} `uri` - String URI encoded\n\n*@param* {string} `columns` - String comma “,” separated\n\n*@param* {string} `select` - String sql code\n\n*@param* {list} `args` - String sql code\n\n*@param* {string} `sort` - coloumn:a coloumn specified in 'coloumns'\n",
        "params": [{"name":"uri: string","desc":"String URI encoded","type":"string"},{"name":"columns: string","desc":"String comma “,” separated","type":"string"},{"name":"select: string","desc":"String sql code","type":"string"},{"name":"args: list","desc":"String sql code","type":"list"},{"name":"sort: string","desc":"coloumn:a coloumn specified in 'coloumns'","type":"string"}],
        "call": "app.QueryContent(uri: string, columns: string, select: string, args: list, sort: string)"
    },
    {
        "name": "Quit",
        "kind": "Method",
        "detail": "Quit: (msg: string, title: string, options: string)",
        "doc": "Quits the app with showing an @Alert dialog box before exiting. The function will pause the program and exit before any further commands can be executed",
        "param": "\n*@param* {string} `msg` - \n\n*@param* {string} `title` - \n\n*@param* {string} `options` - String comma “,” separated NoDim,NoFocus\n",
        "params": [{"name":"msg: string","desc":"","type":"string"},{"name":"title: string","desc":"","type":"string"},{"name":"options: string","desc":"String comma “,” separated NoDim,NoFocus","type":"string"}],
        "call": "app.Quit(msg: string, title: string, options: string)"
    },
    {
        "name": "ReadFile",
        "kind": "Method",
        "detail": "ReadFile: (file: string, encoding: string)",
        "doc": "Reads a file from the local filesystem and returns its contents.",
        "param": "\n*@param* {string} `file` - String file path or content:// uri\n\n*@param* {string} `encoding` - US-ASCII|UTF-8|UTF-16|UTF-16BE|UTF-16LE|windows-1252|ISO-8859-1:Latin-1|base64\n",
        "params": [{"name":"file: string","desc":"String file path or content:// uri","type":"string"},{"name":"encoding: string","desc":"US-ASCII|UTF-8|UTF-16|UTF-16BE|UTF-16LE|windows-1252|ISO-8859-1:Latin-1|base64","type":"string"}],
        "call": "app.ReadFile(file: string, encoding: string)"
    },
    {
        "name": "ReadFileData",
        "kind": "Method",
        "detail": "ReadFileData: (file: string, mode: string)",
        "doc": "Reads file data from the local filesystem and returns its contents.",
        "param": "\n*@param* {string} `file` - String “/absolute/...” path to a file\n\n*@param* {string} `mode` - base64|hex|int|ascii\n",
        "params": [{"name":"file: string","desc":"String “/absolute/...” path to a file","type":"string"},{"name":"mode: string","desc":"base64|hex|int|ascii","type":"string"}],
        "call": "app.ReadFileData(file: string, mode: string)"
    },
    {
        "name": "RealPath",
        "kind": "Method",
        "detail": "RealPath: (path: string)",
        "doc": "Converts short file paths to full path",
        "param": "\n*@param* {string} `path` - String path to file or folder ( “/absolute/...” or “relative/...” )\n",
        "params": [{"name":"path: string","desc":"String path to file or folder ( “/absolute/...” or “relative/...” )","type":"string"}],
        "call": "app.RealPath(path: string)"
    },
    {
        "name": "RedirectAssets",
        "kind": "Method",
        "detail": "RedirectAssets: (dir: string)",
        "doc": "Reads the assets folders “Img”,“Snd”,“Html” and “Misc” from an external folder outside the apk",
        "param": "\n*@param* {string} `dir` - String path to folder ( “/absolute/...” or “relative/...” )\n",
        "params": [{"name":"dir: string","desc":"String path to folder ( “/absolute/...” or “relative/...” )","type":"string"}],
        "call": "app.RedirectAssets(dir: string)"
    },
    {
        "name": "RemoveDrawer",
        "kind": "Method",
        "detail": "RemoveDrawer: (side: string)",
        "doc": "Removes a drawer layout from a given side.",
        "param": "\n*@param* {string} `side` - left|right\n",
        "params": [{"name":"side: string","desc":"left|right","type":"string"}],
        "call": "app.RemoveDrawer(side: string)"
    },
    {
        "name": "RemoveLayout",
        "kind": "Method",
        "detail": "RemoveLayout: (layout: appobject)",
        "doc": "Removes a layout added to the app.",
        "param": "\n*@param* {appobject} `layout` - CreateLayout\n",
        "params": [{"name":"layout: appobject","desc":"CreateLayout","type":"appobject"}],
        "call": "app.RemoveLayout(layout: appobject)"
    },
    {
        "name": "RemovePermission",
        "kind": "Method",
        "detail": "RemovePermission: (uri: string)",
        "doc": "Removes a granted permissio",
        "param": "\n*@param* {string} `uri` - String URI encoded\n",
        "params": [{"name":"uri: string","desc":"String URI encoded","type":"string"}],
        "call": "app.RemovePermission(uri: string)"
    },
    {
        "name": "RenameFile",
        "kind": "Method",
        "detail": "RenameFile: (source: string, destination: string)",
        "doc": "Renames a file on the local filesystem. This method can also be used to move a file to a whole other destination.",
        "param": "\n*@param* {string} `source` - String path to file or folder ( “/absolute/...” or “relative/...” )\n\n*@param* {string} `destination` - String path to file or folder ( “/absolute/...” or “relative/...” )\n",
        "params": [{"name":"source: string","desc":"String path to file or folder ( “/absolute/...” or “relative/...” )","type":"string"},{"name":"destination: string","desc":"String path to file or folder ( “/absolute/...” or “relative/...” )","type":"string"}],
        "call": "app.RenameFile(source: string, destination: string)"
    },
    {
        "name": "RenameFolder",
        "kind": "Method",
        "detail": "RenameFolder: (source: string, destination: string)",
        "doc": "Renames a folder on the local filesystem. This method can also be used to move a folder to a whole other destination.",
        "param": "\n*@param* {string} `source` - String path to file or folder ( “/absolute/...” or “relative/...” )\n\n*@param* {string} `destination` - String path to file or folder ( “/absolute/...” or “relative/...” )\n",
        "params": [{"name":"source: string","desc":"String path to file or folder ( “/absolute/...” or “relative/...” )","type":"string"},{"name":"destination: string","desc":"String path to file or folder ( “/absolute/...” or “relative/...” )","type":"string"}],
        "call": "app.RenameFolder(source: string, destination: string)"
    },
    {
        "name": "ReplaceInFile",
        "kind": "Method",
        "detail": "ReplaceInFile: (file: string, txt: string, rep: string, options: string)",
        "doc": "Replaces all occurances of some text or a regex pattern in a local file with some other text",
        "param": "\n*@param* {string} `file` - String path to file ( “/absolute/...” or “relative/...” )\n\n*@param* {string} `txt` - String path to file ( “/absolute/...” or “relative/...” )\n\n*@param* {string} `rep` - String path to file ( “/absolute/...” or “relative/...” )\n\n*@param* {string} `options` - String comma “,” separated\n",
        "params": [{"name":"file: string","desc":"String path to file ( “/absolute/...” or “relative/...” )","type":"string"},{"name":"txt: string","desc":"String path to file ( “/absolute/...” or “relative/...” )","type":"string"},{"name":"rep: string","desc":"String path to file ( “/absolute/...” or “relative/...” )","type":"string"},{"name":"options: string","desc":"String comma “,” separated","type":"string"}],
        "call": "app.ReplaceInFile(file: string, txt: string, rep: string, options: string)"
    },
    {
        "name": "SaveBoolean",
        "kind": "Method",
        "detail": "SaveBoolean: (name: string, value: boolean, file: string)",
        "doc": "Save a boolean value to remember varibale values between multiple app starts.",
        "param": "\n*@param* {string} `name` - \n\n*@param* {boolean} `value` - \n\n*@param* {string} `file` - String path to file ( “/absolute/...” or “relative/...” )\n",
        "params": [{"name":"name: string","desc":"","type":"string"},{"name":"value: boolean","desc":"","type":"boolean"},{"name":"file: string","desc":"String path to file ( “/absolute/...” or “relative/...” )","type":"string"}],
        "call": "app.SaveBoolean(name: string, value: boolean, file: string)"
    },
    {
        "name": "SaveCookies",
        "kind": "Method",
        "detail": "SaveCookies: ()",
        "doc": "Saves cookies for webviews or html apps.",
        "param": "",
        "params": [],
        "call": "app.SaveCookies()"
    },
    {
        "name": "SaveNumber",
        "kind": "Method",
        "detail": "SaveNumber: (name: string, value: number, file: string)",
        "doc": "Save a number value to remember varibale values between multiple app starts and updates.",
        "param": "\n*@param* {string} `name` - \n\n*@param* {number} `value` - \n\n*@param* {string} `file` - String path to file ( “/absolute/...” or “relative/...” )\n",
        "params": [{"name":"name: string","desc":"","type":"string"},{"name":"value: number","desc":"","type":"number"},{"name":"file: string","desc":"String path to file ( “/absolute/...” or “relative/...” )","type":"string"}],
        "call": "app.SaveNumber(name: string, value: number, file: string)"
    },
    {
        "name": "SaveJson",
        "kind": "Method",
        "detail": "SaveJson: (name: string, value: object, file: string)",
        "doc": "Save a json object to remember varibale values between multiple app starts and updates.",
        "param": "\n*@param* {string} `name` - \n\n*@param* {object} `value` - \n\n*@param* {string} `file` - String path to file ( “/absolute/...” or “relative/...” )\n",
        "params": [{"name":"name: string","desc":"","type":"string"},{"name":"value: object","desc":"","type":"object"},{"name":"file: string","desc":"String path to file ( “/absolute/...” or “relative/...” )","type":"string"}],
        "call": "app.SaveJson(name: string, value: object, file: string)"
    },
    {
        "name": "SaveText",
        "kind": "Method",
        "detail": "SaveText: (name: string, value: string, file: string)",
        "doc": "Save a text value to remember varibale values between multiple app starts and updates.",
        "param": "\n*@param* {string} `name` - \n\n*@param* {string} `value` - \n\n*@param* {string} `file` - String path to file ( “/absolute/...” or “relative/...” )\n",
        "params": [{"name":"name: string","desc":"","type":"string"},{"name":"value: string","desc":"","type":"string"},{"name":"file: string","desc":"String path to file ( “/absolute/...” or “relative/...” )","type":"string"}],
        "call": "app.SaveText(name: string, value: string, file: string)"
    },
    {
        "name": "ScanFile",
        "kind": "Method",
        "detail": "ScanFile: (file: string)",
        "doc": "Forces android to scan an image file to appear in the phone's gallery.",
        "param": "\n*@param* {string} `file` - String path to file ( “/absolute/...” or “relative/...” )\n",
        "params": [{"name":"file: string","desc":"String path to file ( “/absolute/...” or “relative/...” )","type":"string"}],
        "call": "app.ScanFile(file: string)"
    },
    {
        "name": "ScreenShot",
        "kind": "Method",
        "detail": "ScreenShot: (fileName: string, quality: number)",
        "doc": "Takes a screen shot of your app and saves it to the specified path. Quality is an **option**al percentage value for jpg files defaulting to 95.",
        "param": "\n*@param* {string} `fileName` - String path to file ( “/absolute/...” or “relative/...” )\n\n*@param* {number} `quality` - Number percent\n",
        "params": [{"name":"fileName: string","desc":"String path to file ( “/absolute/...” or “relative/...” )","type":"string"},{"name":"quality: number","desc":"Number percent","type":"number"}],
        "call": "app.ScreenShot(fileName: string, quality: number)"
    },
    {
        "name": "ScheduleJob",
        "kind": "Method",
        "detail": "ScheduleJob: (delay: number, options: string)",
        "doc": "Schedules background jobs defined in a Job.js file",
        "param": "\n*@param* {number} `delay` - Number milliseconds\n\n*@param* {string} `options` - Number milliseconds\n",
        "params": [{"name":"delay: number","desc":"Number milliseconds","type":"number"},{"name":"options: string","desc":"Number milliseconds","type":"string"}],
        "call": "app.ScheduleJob(delay: number, options: string)"
    },
    {
        "name": "Script",
        "kind": "Method",
        "detail": "Script: (file: string, noDefer: )",
        "doc": "Loads a local JavaScript file to your app to make its functionality available in your app.",
        "param": "\n*@param* {string} `file` - String path to file ( “/absolute/...” or “relative/...” )\n\n*@param* {} `noDefer` - String path to file ( “/absolute/...” or “relative/...” )\n",
        "params": [{"name":"file: string","desc":"String path to file ( “/absolute/...” or “relative/...” )","type":"string"},{"name":"noDefer: ","desc":"String path to file ( “/absolute/...” or “relative/...” )","type":""}],
        "call": "app.Script(file: string, noDefer: )"
    },
    {
        "name": "SendFile",
        "kind": "Method",
        "detail": "SendFile: (file: string, subject: string, text: string, choose: string)",
        "doc": "Send a file to a remote target, ie. via Email. %c The **subject** and **text** arguments will be auto filled and the **choose** text will be displayed when the user selects the target app. Default may be something like _'Complete action using'_",
        "param": "\n*@param* {string} `file` - String “/absolute/...” path to a file\n\n*@param* {string} `subject` - String “/absolute/...” path to a file\n\n*@param* {string} `text` - String “/absolute/...” path to a file\n\n*@param* {string} `choose` - String “/absolute/...” path to a file\n",
        "params": [{"name":"file: string","desc":"String “/absolute/...” path to a file","type":"string"},{"name":"subject: string","desc":"String “/absolute/...” path to a file","type":"string"},{"name":"text: string","desc":"String “/absolute/...” path to a file","type":"string"},{"name":"choose: string","desc":"String “/absolute/...” path to a file","type":"string"}],
        "call": "app.SendFile(file: string, subject: string, text: string, choose: string)"
    },
    {
        "name": "SendImage",
        "kind": "Method",
        "detail": "SendImage: (file: string, choose: string)",
        "doc": "Send an image to a remote target, ie. via Email or a messenger. The **choose** text will be displayed when the user selects the target app. Default may be something like _'Complete action using'_",
        "param": "\n*@param* {string} `file` - String “/absolute/...” path to a file\n\n*@param* {string} `choose` - String “/absolute/...” path to a file\n",
        "params": [{"name":"file: string","desc":"String “/absolute/...” path to a file","type":"string"},{"name":"choose: string","desc":"String “/absolute/...” path to a file","type":"string"}],
        "call": "app.SendImage(file: string, choose: string)"
    },
    {
        "name": "SendIntent",
        "kind": "Method",
        "detail": "SendIntent: (packageName: string, className: string, action: string, category: string, uri: string, type: string, extras: list, options: string, callback: function)",
        "doc": "Intens can be used to perform an operation between different applications or activities. _It is basically a passive data structure holding an abstract description of an action to be performed_",
        "param": "\n*@param* {string} `packageName` - \n\n*@param* {string} `className` - \n\n*@param* {string} `action` - android.intent.action.*\n\n*@param* {string} `category` - android.intent.category.*\n\n*@param* {string} `uri` - String URI encoded\n\n*@param* {string} `type` - String mimetype\n\n*@param* {list} `extras` - [{ name:str&comma; type:str-\"string|float|int|long|bool|list|file|keydown|keyup\"&comma; value:str }]\n\n*@param* {string} `options` - String comma “,” separated result,cleartask\n\n*@param* {function} `callback` - String comma “,” separated result,cleartask\n",
        "params": [{"name":"packageName: string","desc":"","type":"string"},{"name":"className: string","desc":"","type":"string"},{"name":"action: string","desc":"android.intent.action.*","type":"string"},{"name":"category: string","desc":"android.intent.category.*","type":"string"},{"name":"uri: string","desc":"String URI encoded","type":"string"},{"name":"type: string","desc":"String mimetype","type":"string"},{"name":"extras: list","desc":"[{ name:str&comma; type:str-\\\"string|float|int|long|bool|list|file|keydown|keyup\\\"&comma; value:str }]","type":"list"},{"name":"options: string","desc":"String comma “,” separated result,cleartask","type":"string"},{"name":"callback: function","desc":"String comma “,” separated result,cleartask","type":"function"}],
        "call": "app.SendIntent(packageName: string, className: string, action: string, category: string, uri: string, type: string, extras: list, options: string, callback: function)"
    },
    {
        "name": "SendMail",
        "kind": "Method",
        "detail": "SendMail: (address: string, subject: string, body: string, attach: string, type: string, options: string)",
        "doc": "Send an EMail to someone using the default mail application. The passed argumets will be auto-filled",
        "param": "\n*@param* {string} `address` - \n\n*@param* {string} `subject` - \n\n*@param* {string} `body` - \n\n*@param* {string} `attach` - String path to file or folder ( “/absolute/...” or “relative/...” )\n\n*@param* {string} `type` - String mimetype\n\n*@param* {string} `options` - SendTo\n",
        "params": [{"name":"address: string","desc":"","type":"string"},{"name":"subject: string","desc":"","type":"string"},{"name":"body: string","desc":"","type":"string"},{"name":"attach: string","desc":"String path to file or folder ( “/absolute/...” or “relative/...” )","type":"string"},{"name":"type: string","desc":"String mimetype","type":"string"},{"name":"options: string","desc":"SendTo","type":"string"}],
        "call": "app.SendMail(address: string, subject: string, body: string, attach: string, type: string, options: string)"
    },
    {
        "name": "SendMessage",
        "kind": "Method",
        "detail": "SendMessage: (message: string)",
        "doc": "Send a message from a Service to the main app",
        "param": "\n*@param* {string} `message` - \n",
        "params": [{"name":"message: string","desc":"","type":"string"}],
        "call": "app.SendMessage(message: string)"
    },
    {
        "name": "SendSMS",
        "kind": "Method",
        "detail": "SendSMS: (msg: string, number: string)",
        "doc": "Send an SMS to someone using the default SMS application. The passed argumets will be auto-filled or requested by the SMS app otherwise. %c",
        "param": "\n*@param* {string} `msg` - \n\n*@param* {string} `number` - String number\n",
        "params": [{"name":"msg: string","desc":"","type":"string"},{"name":"number: string","desc":"String number","type":"string"}],
        "call": "app.SendSMS(msg: string, number: string)"
    },
    {
        "name": "SendText",
        "kind": "Method",
        "detail": "SendText: (text: string, subject: string, choose: string)",
        "doc": "This Method is used for sharing text between apps",
        "param": "\n*@param* {string} `text` - \n\n*@param* {string} `subject` - \n\n*@param* {string} `choose` - \n",
        "params": [{"name":"text: string","desc":"","type":"string"},{"name":"subject: string","desc":"","type":"string"},{"name":"choose: string","desc":"","type":"string"}],
        "call": "app.SendText(text: string, subject: string, choose: string)"
    },
    {
        "name": "SetAlarm",
        "kind": "Method",
        "detail": "SetAlarm: (type: string, id: , callback: function, time: number, interval: number, options: string)",
        "doc": "Set a time when you want your app to start automatically if it is not already opened. When the alarm is fired, the global _OnAlarm_ event will be fired",
        "param": "\n*@param* {string} `type` - Set|Repeat|Cancel\n\n*@param* {} `id` - Set|Repeat|Cancel\n\n*@param* {function} `callback` - Set|Repeat|Cancel\n\n*@param* {number} `time` - Number datetime in milliseconds (from JS Date object)\n\n*@param* {number} `interval` - Number milliseconds\n\n*@param* {string} `options` - String comma “,” separated ExactIdle|Exact:only works for single shot alarms,App:Opens main app if called from a service\n",
        "params": [{"name":"type: string","desc":"Set|Repeat|Cancel","type":"string"},{"name":"id: ","desc":"Set|Repeat|Cancel","type":""},{"name":"callback: function","desc":"Set|Repeat|Cancel","type":"function"},{"name":"time: number","desc":"Number datetime in milliseconds (from JS Date object)","type":"number"},{"name":"interval: number","desc":"Number milliseconds","type":"number"},{"name":"options: string","desc":"String comma “,” separated ExactIdle|Exact:only works for single shot alarms,App:Opens main app if called from a service","type":"string"}],
        "call": "app.SetAlarm(type: string, id: , callback: function, time: number, interval: number, options: string)"
    },
    {
        "name": "SetAutoBoot",
        "kind": "Method",
        "detail": "SetAutoBoot: (auto: string)",
        "doc": "Causes the current running APK or its Service to be started automatically when your device boots.",
        "param": "\n*@param* {string} `auto` - App|Service|None\n",
        "params": [{"name":"auto: string","desc":"App|Service|None","type":"string"}],
        "call": "app.SetAutoBoot(auto: string)"
    },
    {
        "name": "SetAutoStart",
        "kind": "Method",
        "detail": "SetAutoStart: (appName: string)",
        "doc": "Set a DroidScript project name which will be launched automatically when DroidScript starts.",
        "param": "\n*@param* {string} `appName` - \n",
        "params": [{"name":"appName: string","desc":"","type":"string"}],
        "call": "app.SetAutoStart(appName: string)"
    },
    {
        "name": "SetAutoWifi",
        "kind": "Method",
        "detail": "SetAutoWifi: (auto: boolean)",
        "doc": "Automatically enables the use of the WiFi editor. This method is mainly useful for headless devices like AndroidTV which don't have a DroidScript UI.",
        "param": "\n*@param* {boolean} `auto` - \n",
        "params": [{"name":"auto: boolean","desc":"","type":"boolean"}],
        "call": "app.SetAutoWifi(auto: boolean)"
    },
    {
        "name": "SetBackColor",
        "kind": "Method",
        "detail": "SetBackColor: (color: string)",
        "doc": "Changes the background color of the app",
        "param": "\n*@param* {string} `color` - String <br>&nbsp;&nbsp;hexadecimal: “#rrggbb”, “#aarrggbb”<br>&nbsp;&nbsp;colourName: “red”, “green”, ...\n",
        "params": [{"name":"color: string","desc":"String <br>&nbsp;&nbsp;hexadecimal: “#rrggbb”, “#aarrggbb”<br>&nbsp;&nbsp;colourName: “red”, “green”, ...","type":"string"}],
        "call": "app.SetBackColor(color: string)"
    },
    {
        "name": "SetBluetoothEnabled",
        "kind": "Method",
        "detail": "SetBluetoothEnabled: (enable: boolean)",
        "doc": "Enables Bluetooth on the device.",
        "param": "\n*@param* {boolean} `enable` - \n",
        "params": [{"name":"enable: boolean","desc":"","type":"boolean"}],
        "call": "app.SetBluetoothEnabled(enable: boolean)"
    },
    {
        "name": "SetClipboardText",
        "kind": "Method",
        "detail": "SetClipboardText: (text: string)",
        "doc": "The SetClipboardText method puts text data on the device clip board. This allows you to copy and paste text between different applications.",
        "param": "\n*@param* {string} `text` - \n",
        "params": [{"name":"text: string","desc":"","type":"string"}],
        "call": "app.SetClipboardText(text: string)"
    },
    {
        "name": "SetData",
        "kind": "Method",
        "detail": "SetData: (name: string, value: string)",
        "doc": "Saves variables until the app closes. All saved data will be lost afterwards. %c",
        "param": "\n*@param* {string} `name` - \n\n*@param* {string} `value` - \n",
        "params": [{"name":"name: string","desc":"","type":"string"},{"name":"value: string","desc":"","type":"string"}],
        "call": "app.SetData(name: string, value: string)"
    },
    {
        "name": "SetDebug",
        "kind": "Method",
        "detail": "SetDebug: (switches: string)",
        "doc": "SetDebug lets you control the debugging level. The available modes are",
        "param": "\n*@param* {string} `switches` - String comma “,” separated console,ds,adb,all\n",
        "params": [{"name":"switches: string","desc":"String comma “,” separated console,ds,adb,all","type":"string"}],
        "call": "app.SetDebug(switches: string)"
    },
    {
        "name": "SetDensity",
        "kind": "Method",
        "detail": "SetDensity: (dpi: number)",
        "doc": "Changes the dpi value (dots per inch) that affects the content of any control created afterwards. The smaller the value, the smaller the scaling.",
        "param": "\n*@param* {number} `dpi` - Number integer\n",
        "params": [{"name":"dpi: number","desc":"Number integer","type":"number"}],
        "call": "app.SetDensity(dpi: number)"
    },
    {
        "name": "SetInBackground",
        "kind": "Method",
        "detail": "SetInBackground: ()",
        "doc": "Set the current service to run in the background.",
        "param": "",
        "params": [],
        "call": "app.SetInBackground()"
    },
    {
        "name": "SetInForeground",
        "kind": "Method",
        "detail": "SetInForeground: (title: string, text: string, largeIcon: string, smallIcon: string, importance: string)",
        "doc": "Set the current service to run in the foreground.",
        "param": "\n*@param* {string} `title` - \n\n*@param* {string} `text` - \n\n*@param* {string} `largeIcon` - String path to file ( “/absolute/...” or “relative/...” )\n\n*@param* {string} `smallIcon` - String path to file ( “/absolute/...” or “relative/...” )\n\n*@param* {string} `importance` - min|low|default|high|none\n",
        "params": [{"name":"title: string","desc":"","type":"string"},{"name":"text: string","desc":"","type":"string"},{"name":"largeIcon: string","desc":"String path to file ( “/absolute/...” or “relative/...” )","type":"string"},{"name":"smallIcon: string","desc":"String path to file ( “/absolute/...” or “relative/...” )","type":"string"},{"name":"importance: string","desc":"min|low|default|high|none","type":"string"}],
        "call": "app.SetInForeground(title: string, text: string, largeIcon: string, smallIcon: string, importance: string)"
    },
    {
        "name": "SetJoystickOptions",
        "kind": "Method",
        "detail": "SetJoystickOptions: (options: string)",
        "doc": "Set options for the connected joystick. The “forwardkeys” **option** allows the joystick key presses to pass onto the child controls of the main activity. (They are normally prevented from reaching child controls)",
        "param": "\n*@param* {string} `options` - String comma “,” separated ForwardKeys:allows the joystick key presses to pass onto the child controls of the main activity\n",
        "params": [{"name":"options: string","desc":"String comma “,” separated ForwardKeys:allows the joystick key presses to pass onto the child controls of the main activity","type":"string"}],
        "call": "app.SetJoystickOptions(options: string)"
    },
    {
        "name": "SetKioskMode",
        "kind": "Method",
        "detail": "SetKioskMode: (mode: string, enable: boolean, options: string, packages: string)",
        "doc": "Blocks android functionality to keep the rest of your phone safe while others may use your app.",
        "param": "\n*@param* {string} `mode` - String comma “,” separated Power,Status,Nav,NavRight,LockTask:COSU kiosk,Pin:task un-/pinning\n\n*@param* {boolean} `enable` - String comma “,” separated Power,Status,Nav,NavRight,LockTask:COSU kiosk,Pin:task un-/pinning\n\n*@param* {string} `options` - String comma “,” separated Black,Tasks:prevents recent tasks button working\n\n*@param* {string} `packages` - String comma “,” separated Black,Tasks:prevents recent tasks button working\n",
        "params": [{"name":"mode: string","desc":"String comma “,” separated Power,Status,Nav,NavRight,LockTask:COSU kiosk,Pin:task un-/pinning","type":"string"},{"name":"enable: boolean","desc":"String comma “,” separated Power,Status,Nav,NavRight,LockTask:COSU kiosk,Pin:task un-/pinning","type":"boolean"},{"name":"options: string","desc":"String comma “,” separated Black,Tasks:prevents recent tasks button working","type":"string"},{"name":"packages: string","desc":"String comma “,” separated Black,Tasks:prevents recent tasks button working","type":"string"}],
        "call": "app.SetKioskMode(mode: string, enable: boolean, options: string, packages: string)"
    },
    {
        "name": "SetAppLanguage",
        "kind": "Method",
        "detail": "SetAppLanguage: (name: string)",
        "doc": "Loads the current language code from the lang.json file in your project root folder. Make sure you use the [standard 2 letter language codes](http://www.loc.gov/standards/iso639-2/php/code_list.php).",
        "param": "\n*@param* {string} `name` - \n",
        "params": [{"name":"name: string","desc":"","type":"string"}],
        "call": "app.SetAppLanguage(name: string)"
    },
    {
        "name": "SetMenu",
        "kind": "Method",
        "detail": "SetMenu: (list: string, iconPath: string)",
        "doc": "Set the app menu fields. When a menu entry is touched, the global _OnMenu_ event will be called.",
        "param": "\n*@param* {string} `list` - String comma “,” separated\n\n*@param* {string} `iconPath` - String path to file ( “/absolute/...” or “relative/...” )\n",
        "params": [{"name":"list: string","desc":"String comma “,” separated","type":"string"},{"name":"iconPath: string","desc":"String path to file ( “/absolute/...” or “relative/...” )","type":"string"}],
        "call": "app.SetMenu(list: string, iconPath: string)"
    },
    {
        "name": "SetMargins",
        "kind": "Method",
        "detail": "SetMargins: (left: number, top: number, right: number, bottom: number, mode: string)",
        "doc": "Set the default margins settings for control",
        "param": "\n*@param* {number} `left` - \n\n*@param* {number} `top` - \n\n*@param* {number} `right` - \n\n*@param* {number} `bottom` - Number fraction (0..1)\n\n*@param* {string} `mode` - px|sp|dip|mm|pt\n",
        "params": [{"name":"left: number","desc":"","type":"number"},{"name":"top: number","desc":"","type":"number"},{"name":"right: number","desc":"","type":"number"},{"name":"bottom: number","desc":"Number fraction (0..1)","type":"number"},{"name":"mode: string","desc":"px|sp|dip|mm|pt","type":"string"}],
        "call": "app.SetMargins(left: number, top: number, right: number, bottom: number, mode: string)"
    },
    {
        "name": "SetMockLocation",
        "kind": "Method",
        "detail": "SetMockLocation: (lat: number, lng: number, accuracy: number)",
        "doc": "Emulates a GPS location on the device.",
        "param": "\n*@param* {number} `lat` - \n\n*@param* {number} `lng` - \n\n*@param* {number} `accuracy` - \n",
        "params": [{"name":"lat: number","desc":"","type":"number"},{"name":"lng: number","desc":"","type":"number"},{"name":"accuracy: number","desc":"","type":"number"}],
        "call": "app.SetMockLocation(lat: number, lng: number, accuracy: number)"
    },
    {
        "name": "SetNavBarColor",
        "kind": "Method",
        "detail": "SetNavBarColor: (color: string)",
        "doc": "Change the android NavBar color.",
        "param": "\n*@param* {string} `color` - String <br>&nbsp;&nbsp;hexadecimal: “#rrggbb”, “#aarrggbb”<br>&nbsp;&nbsp;colourName: “red”, “green”, ...\n",
        "params": [{"name":"color: string","desc":"String <br>&nbsp;&nbsp;hexadecimal: “#rrggbb”, “#aarrggbb”<br>&nbsp;&nbsp;colourName: “red”, “green”, ...","type":"string"}],
        "call": "app.SetNavBarColor(color: string)"
    },
    {
        "name": "SetOnBroadcast",
        "kind": "Method",
        "detail": "SetOnBroadcast: (callback: function, action: string)",
        "doc": "Define a callback function for incoming Broadcast messages.",
        "param": "\n*@param* {function} `callback` - \n\n*@param* {string} `action` - \n",
        "params": [{"name":"callback: function","desc":"","type":"function"},{"name":"action: string","desc":"","type":"string"}],
        "call": "app.SetOnBroadcast(callback: function, action: string)"
    },
    {
        "name": "SetOnDebug",
        "kind": "Method",
        "detail": "SetOnDebug: (callback: function)",
        "doc": "Define a callback function for debug messages.",
        "param": "\n*@param* {function} `callback` - \n",
        "params": [{"name":"callback: function","desc":"","type":"function"}],
        "call": "app.SetOnDebug(callback: function)"
    },
    {
        "name": "SetOnError",
        "kind": "Method",
        "detail": "SetOnError: (callback: function)",
        "doc": "Define a callback function to catch thrown errors messages.",
        "param": "\n*@param* {function} `callback` - \n",
        "params": [{"name":"callback: function","desc":"","type":"function"}],
        "call": "app.SetOnError(callback: function)"
    },
    {
        "name": "SetOnKey",
        "kind": "Method",
        "detail": "SetOnKey: (callback: function)",
        "doc": "You can use SetOnKey for receiving and handling all key events fired in the application",
        "param": "\n*@param* {function} `callback` - \n",
        "params": [{"name":"callback: function","desc":"","type":"function"}],
        "call": "app.SetOnKey(callback: function)"
    },
    {
        "name": "SetOnShowKeyboard",
        "kind": "Method",
        "detail": "SetOnShowKeyboard: (callback: function)",
        "doc": "Define a callback function to detect when keyboard visible state has changed.",
        "param": "\n*@param* {function} `callback` - \n",
        "params": [{"name":"callback: function","desc":"","type":"function"}],
        "call": "app.SetOnShowKeyboard(callback: function)"
    },
    {
        "name": "SetOnWifiChange",
        "kind": "Method",
        "detail": "SetOnWifiChange: (callback: function)",
        "doc": "Define a callback function to detect when the WiFi connected state has changed. The **state** parameter can be “CONNECTING”, “CONNECTED”, or “DISCONNECTED”. The WiFi ssid is passed on “CONNECTED” only.",
        "param": "\n*@param* {function} `callback` - \n",
        "params": [{"name":"callback: function","desc":"","type":"function"}],
        "call": "app.SetOnWifiChange(callback: function)"
    },
    {
        "name": "SetOptions",
        "kind": "Method",
        "detail": "SetOptions: (options: string)",
        "doc": "Define some global options for the app.",
        "param": "\n*@param* {string} `options` - String comma “,” separated UseBrowser,NoKeys|ShowKeys,NoThemeAlerts,IgnoreSslErrors,TouchModal,NoTouch,NoFocus,Secure,ShowLocked,WakeScreen,ScreenOn\n",
        "params": [{"name":"options: string","desc":"String comma “,” separated UseBrowser,NoKeys|ShowKeys,NoThemeAlerts,IgnoreSslErrors,TouchModal,NoTouch,NoFocus,Secure,ShowLocked,WakeScreen,ScreenOn","type":"string"}],
        "call": "app.SetOptions(options: string)"
    },
    {
        "name": "SetOrientation",
        "kind": "Method",
        "detail": "SetOrientation: (orient: string, callback: function)",
        "doc": "Set the display orientation to a fixed value. You can unlock it again passing “Default” as **orientation**.",
        "param": "\n*@param* {string} `orient` - Default|Landscape|ReverseLandscape|Portrait|ReversePortrait\n\n*@param* {function} `callback` - Default|Landscape|ReverseLandscape|Portrait|ReversePortrait\n",
        "params": [{"name":"orient: string","desc":"Default|Landscape|ReverseLandscape|Portrait|ReversePortrait","type":"string"},{"name":"callback: function","desc":"Default|Landscape|ReverseLandscape|Portrait|ReversePortrait","type":"function"}],
        "call": "app.SetOrientation(orient: string, callback: function)"
    },
    {
        "name": "SetPosition",
        "kind": "Method",
        "detail": "SetPosition: (left: number, top: number, width: number, height: number, options: string)",
        "doc": "Change the main app's position and size. Mostly used for transparent apps",
        "param": "\n*@param* {number} `left` - Number fraction (0..1)\n\n*@param* {number} `top` - Number fraction (0..1)\n\n*@param* {number} `width` - Number fraction (0..1)\n\n*@param* {number} `height` - Number fraction (0..1)\n\n*@param* {string} `options` - px\n",
        "params": [{"name":"left: number","desc":"Number fraction (0..1)","type":"number"},{"name":"top: number","desc":"Number fraction (0..1)","type":"number"},{"name":"width: number","desc":"Number fraction (0..1)","type":"number"},{"name":"height: number","desc":"Number fraction (0..1)","type":"number"},{"name":"options: string","desc":"px","type":"string"}],
        "call": "app.SetPosition(left: number, top: number, width: number, height: number, options: string)"
    },
    {
        "name": "SetPriority",
        "kind": "Method",
        "detail": "SetPriority: (level: string)",
        "doc": "Changes the GUI thread priority",
        "param": "\n*@param* {string} `level` - Low|Medium|High\n",
        "params": [{"name":"level: string","desc":"Low|Medium|High","type":"string"}],
        "call": "app.SetPriority(level: string)"
    },
    {
        "name": "SetRingerMode",
        "kind": "Method",
        "detail": "SetRingerMode: (mode: string)",
        "doc": "Change the current ringer mode of the device which can be “Normal”, “Vibrate” or “Silent”.",
        "param": "\n*@param* {string} `mode` - Normal|Vibrate|Silent\n",
        "params": [{"name":"mode: string","desc":"Normal|Vibrate|Silent","type":"string"}],
        "call": "app.SetRingerMode(mode: string)"
    },
    {
        "name": "SetScreenBrightness",
        "kind": "Method",
        "detail": "SetScreenBrightness: (level: number)",
        "doc": "Change the screen brightness to a value between 0 and 1, where 0 is the lowest and 1 the highest possible brightness value",
        "param": "\n*@param* {number} `level` - Number fraction (0..1)\n",
        "params": [{"name":"level: number","desc":"Number fraction (0..1)","type":"number"}],
        "call": "app.SetScreenBrightness(level: number)"
    },
    {
        "name": "SetScreenMode",
        "kind": "Method",
        "detail": "SetScreenMode: (mode: string)",
        "doc": "Changes the screen mode of your application. If null is passed, the [app menu](SetMenu.htm) will be dismissed. When called, the global OnConfig function will be called (if defined)",
        "param": "\n*@param* {string} `mode` - Default|Normal|Full|Game\n",
        "params": [{"name":"mode: string","desc":"Default|Normal|Full|Game","type":"string"}],
        "call": "app.SetScreenMode(mode: string)"
    },
    {
        "name": "SetSharedApp",
        "kind": "Method",
        "detail": "SetSharedApp: (name: string)",
        "doc": "Define a DroidScript Project which will be automatically started when DS received shared data. Check out the 'Shared Data' sample in the DS samples section.",
        "param": "\n*@param* {string} `name` - AppName\n",
        "params": [{"name":"name: string","desc":"AppName","type":"string"}],
        "call": "app.SetSharedApp(name: string)"
    },
    {
        "name": "SetSpeakerPhone",
        "kind": "Method",
        "detail": "SetSpeakerPhone: (on: boolean)",
        "doc": "En/Disables the speaker for phone calls.",
        "param": "\n*@param* {boolean} `on` - \n",
        "params": [{"name":"on: boolean","desc":"","type":"boolean"}],
        "call": "app.SetSpeakerPhone(on: boolean)"
    },
    {
        "name": "SetStatusBarColor",
        "kind": "Method",
        "detail": "SetStatusBarColor: (color: string)",
        "doc": "Change the android status bar color.",
        "param": "\n*@param* {string} `color` - String <br>&nbsp;&nbsp;hexadecimal: “#rrggbb”, “#aarrggbb”<br>&nbsp;&nbsp;colourName: “red”, “green”, ...\n",
        "params": [{"name":"color: string","desc":"String <br>&nbsp;&nbsp;hexadecimal: “#rrggbb”, “#aarrggbb”<br>&nbsp;&nbsp;colourName: “red”, “green”, ...","type":"string"}],
        "call": "app.SetStatusBarColor(color: string)"
    },
    {
        "name": "SetTextSize",
        "kind": "Method",
        "detail": "SetTextSize: (size: number, mode: string)",
        "doc": "Set the default text size setting for control",
        "param": "\n*@param* {number} `size` - \n\n*@param* {string} `mode` - px|dip|sp|mm|pt|pl:scales text in proportion with device resolution|ps:scales text in proportion with device resolution\n",
        "params": [{"name":"size: number","desc":"","type":"number"},{"name":"mode: string","desc":"px|dip|sp|mm|pt|pl:scales text in proportion with device resolution|ps:scales text in proportion with device resolution","type":"string"}],
        "call": "app.SetTextSize(size: number, mode: string)"
    },
    {
        "name": "SetTheme",
        "kind": "Method",
        "detail": "SetTheme: (theme: appobject)",
        "doc": "Change the theme of your app to any created [Theme Object](CreateTheme.htm). The theme will only apply to objects created after the theme was set. You typically need to recreate all your controls or restart the app to apply the new theme.",
        "param": "\n*@param* {appobject} `theme` - CreateTheme\n",
        "params": [{"name":"theme: appobject","desc":"CreateTheme","type":"appobject"}],
        "call": "app.SetTheme(theme: appobject)"
    },
    {
        "name": "SetUserAgent",
        "kind": "Method",
        "detail": "SetUserAgent: (agent: string)",
        "doc": "Change the user agent for html apps. For more details [ask Wikipedia](https://en.wikipedia.org/wiki/User_agent)",
        "param": "\n*@param* {string} `agent` - \n",
        "params": [{"name":"agent: string","desc":"","type":"string"}],
        "call": "app.SetUserAgent(agent: string)"
    },
    {
        "name": "SetUserCreds",
        "kind": "Method",
        "detail": "SetUserCreds: (name: string, password: string)",
        "doc": "Set user credentials in an html app for websites that require user login",
        "param": "\n*@param* {string} `name` - \n\n*@param* {string} `password` - \n",
        "params": [{"name":"name: string","desc":"","type":"string"},{"name":"password: string","desc":"","type":"string"}],
        "call": "app.SetUserCreds(name: string, password: string)"
    },
    {
        "name": "SetVolume",
        "kind": "Method",
        "detail": "SetVolume: (stream: string, level: number, options: string)",
        "doc": "Set the volume of a given volume type as a number between 0 and 1.",
        "param": "\n*@param* {string} `stream` - Alarm|DTMF:Dual Tone Multi-Frequency|Music|Notification|Ring|System|Voicecall\n\n*@param* {number} `level` - Number fraction (0..1)\n\n*@param* {string} `options` - ShowUI\n",
        "params": [{"name":"stream: string","desc":"Alarm|DTMF:Dual Tone Multi-Frequency|Music|Notification|Ring|System|Voicecall","type":"string"},{"name":"level: number","desc":"Number fraction (0..1)","type":"number"},{"name":"options: string","desc":"ShowUI","type":"string"}],
        "call": "app.SetVolume(stream: string, level: number, options: string)"
    },
    {
        "name": "SetWifiApEnabled",
        "kind": "Method",
        "detail": "SetWifiApEnabled: (enable: boolean, ssid: string, key: string)",
        "doc": "En/Disable the mobile Wifi Access Point of the device. You can define a custom WiFi AP name and a password as credentials for other people",
        "param": "\n*@param* {boolean} `enable` - \n\n*@param* {string} `ssid` - \n\n*@param* {string} `key` - \n",
        "params": [{"name":"enable: boolean","desc":"","type":"boolean"},{"name":"ssid: string","desc":"","type":"string"},{"name":"key: string","desc":"","type":"string"}],
        "call": "app.SetWifiApEnabled(enable: boolean, ssid: string, key: string)"
    },
    {
        "name": "SetWifiEnabled",
        "kind": "Method",
        "detail": "SetWifiEnabled: (enable: boolean)",
        "doc": "En/Disable Wifi on the device.",
        "param": "\n*@param* {boolean} `enable` - \n",
        "params": [{"name":"enable: boolean","desc":"","type":"boolean"}],
        "call": "app.SetWifiEnabled(enable: boolean)"
    },
    {
        "name": "Show",
        "kind": "Method",
        "detail": "Show: ()",
        "doc": "Shows the main app layout.",
        "param": "",
        "params": [],
        "call": "app.Show()"
    },
    {
        "name": "ShowCheckList",
        "kind": "Method",
        "detail": "ShowCheckList: (title: string, list: string, callback: function, width: number, height: number, options: string)",
        "doc": "The check list provides a similar functionality to the “Multi” [ListDiaog](CreateListDialog.htm), although you can adjust its initial check states with an object structure",
        "param": "\n*@param* {string} `title` - \n\n*@param* {string} `list` - title:str:checked:bin||lst_obj-{ title:str, check:bin }\n\n*@param* {function} `callback` - title:str:checked:bin||lst_obj-{ title:str, check:bin }\n\n*@param* {number} `width` - Number fraction (0..1)\n\n*@param* {number} `height` - Number fraction (0..1)\n\n*@param* {string} `options` - sun-moon:shows sun and moon icons instead of default check boxes\n",
        "params": [{"name":"title: string","desc":"","type":"string"},{"name":"list: string","desc":"title:str:checked:bin||lst_obj-{ title:str, check:bin }","type":"string"},{"name":"callback: function","desc":"title:str:checked:bin||lst_obj-{ title:str, check:bin }","type":"function"},{"name":"width: number","desc":"Number fraction (0..1)","type":"number"},{"name":"height: number","desc":"Number fraction (0..1)","type":"number"},{"name":"options: string","desc":"sun-moon:shows sun and moon icons instead of default check boxes","type":"string"}],
        "call": "app.ShowCheckList(title: string, list: string, callback: function, width: number, height: number, options: string)"
    },
    {
        "name": "ShowDebug",
        "kind": "Method",
        "detail": "ShowDebug: (show: boolean)",
        "doc": "Show/Hide the debug console as overlay in your app, after calling @CreateDebug.",
        "param": "\n*@param* {boolean} `show` - \n",
        "params": [{"name":"show: boolean","desc":"","type":"boolean"}],
        "call": "app.ShowDebug(show: boolean)"
    },
    {
        "name": "ShowKeyboard",
        "kind": "Method",
        "detail": "ShowKeyboard: (obj: appobject)",
        "doc": "Shows the keyboard on a focussed control.",
        "param": "\n*@param* {appobject} `obj` - \n",
        "params": [{"name":"obj: appobject","desc":"","type":"appobject"}],
        "call": "app.ShowKeyboard(obj: appobject)"
    },
    {
        "name": "ShowMenu",
        "kind": "Method",
        "detail": "ShowMenu: ()",
        "doc": "Show the in-app menu. When a menu entry is touched, the _OnMenu_ event will be called.",
        "param": "",
        "params": [],
        "call": "app.ShowMenu()"
    },
    {
        "name": "ShowPopup",
        "kind": "Method",
        "detail": "ShowPopup: (message: string, options: string)",
        "doc": "Shows a simple popup message on the screen. It automatically disappears after about 5 secods or after an even shorter time if you pass the “Short” **option**, or when the user touches the screen",
        "param": "\n*@param* {string} `message` - \n\n*@param* {string} `options` - String comma “,” separated Bottom,Short|Long\n",
        "params": [{"name":"message: string","desc":"","type":"string"},{"name":"options: string","desc":"String comma “,” separated Bottom,Short|Long","type":"string"}],
        "call": "app.ShowPopup(message: string, options: string)"
    },
    {
        "name": "ShowProgress",
        "kind": "Method",
        "detail": "ShowProgress: (message: string, options: string)",
        "doc": "Shows a rotating progress circle indicating that something happens and that the user should keep his extremities with him until the process completed",
        "param": "\n*@param* {string} `message` - \n\n*@param* {string} `options` - String comma “,” separated NoDim:Don't darken background,NonModal:allow background touch,Solid:shows solid background behind spinner\n",
        "params": [{"name":"message: string","desc":"","type":"string"},{"name":"options: string","desc":"String comma “,” separated NoDim:Don't darken background,NonModal:allow background touch,Solid:shows solid background behind spinner","type":"string"}],
        "call": "app.ShowProgress(message: string, options: string)"
    },
    {
        "name": "ShowProgressBar",
        "kind": "Method",
        "detail": "ShowProgressBar: (title: string, percent: number, options: string)",
        "doc": "Shows a dialog with a bar indicating the current progress of a certain thing.",
        "param": "\n*@param* {string} `title` - \n\n*@param* {number} `percent` - Number percent\n\n*@param* {string} `options` - Light\n",
        "params": [{"name":"title: string","desc":"","type":"string"},{"name":"percent: number","desc":"Number percent","type":"number"},{"name":"options: string","desc":"Light","type":"string"}],
        "call": "app.ShowProgressBar(title: string, percent: number, options: string)"
    },
    {
        "name": "ShowTextDialog",
        "kind": "Method",
        "detail": "ShowTextDialog: (title: string, default: string, callback: function)",
        "doc": "Shows a text input dialog with a title to allow the user to input some text",
        "param": "\n*@param* {string} `title` - \n\n*@param* {string} `default` - \n\n*@param* {function} `callback` - \n",
        "params": [{"name":"title: string","desc":"","type":"string"},{"name":"default: string","desc":"","type":"string"},{"name":"callback: function","desc":"","type":"function"}],
        "call": "app.ShowTextDialog(title: string, default: string, callback: function)"
    },
    {
        "name": "ShowTip",
        "kind": "Method",
        "detail": "ShowTip: (message: string, left: number, top: number, timeOut: number, options: string)",
        "doc": "Shows a tooltip message on the screen",
        "param": "\n*@param* {string} `message` - \n\n*@param* {number} `left` - Number fraction (0..1)\n\n*@param* {number} `top` - Number fraction (0..1)\n\n*@param* {number} `timeOut` - Number milliseconds\n\n*@param* {string} `options` - Down\n",
        "params": [{"name":"message: string","desc":"","type":"string"},{"name":"left: number","desc":"Number fraction (0..1)","type":"number"},{"name":"top: number","desc":"Number fraction (0..1)","type":"number"},{"name":"timeOut: number","desc":"Number milliseconds","type":"number"},{"name":"options: string","desc":"Down","type":"string"}],
        "call": "app.ShowTip(message: string, left: number, top: number, timeOut: number, options: string)"
    },
    {
        "name": "SimulateDrag",
        "kind": "Method",
        "detail": "SimulateDrag: (obj: appobject, x1: number, y1: number, x2: number, y2: number, step: number, pause: number)",
        "doc": "Simulates a drag event on an app object in a scrollable container",
        "param": "\n*@param* {appobject} `obj` - \n\n*@param* {number} `x1` - Number fraction (0..1)\n\n*@param* {number} `y1` - Number fraction (0..1)\n\n*@param* {number} `x2` - Number fraction (0..1)\n\n*@param* {number} `y2` - Number fraction (0..1)\n\n*@param* {number} `step` - Number fraction (0..1)\n\n*@param* {number} `pause` - Number fraction (0..1)\n",
        "params": [{"name":"obj: appobject","desc":"","type":"appobject"},{"name":"x1: number","desc":"Number fraction (0..1)","type":"number"},{"name":"y1: number","desc":"Number fraction (0..1)","type":"number"},{"name":"x2: number","desc":"Number fraction (0..1)","type":"number"},{"name":"y2: number","desc":"Number fraction (0..1)","type":"number"},{"name":"step: number","desc":"Number fraction (0..1)","type":"number"},{"name":"pause: number","desc":"Number fraction (0..1)","type":"number"}],
        "call": "app.SimulateDrag(obj: appobject, x1: number, y1: number, x2: number, y2: number, step: number, pause: number)"
    },
    {
        "name": "SimulateKey",
        "kind": "Method",
        "detail": "SimulateKey: (obj: appobject, keyName: string, modifiers: string, pause: number)",
        "doc": "Simulates a key event on an app object.",
        "param": "\n*@param* {appobject} `obj` - \n\n*@param* {string} `keyName` - \n\n*@param* {string} `modifiers` - META_META_ON,META_RIGHT_ON,NUM_LOCK_ON,SCROLL_LOCK_ON,SHIFT_LEFT_ON,SHIFT_MASK,SHIFT_ON,SHIFT_RIGHT_ON,SYM_ON\n\n*@param* {number} `pause` - META_META_ON,META_RIGHT_ON,NUM_LOCK_ON,SCROLL_LOCK_ON,SHIFT_LEFT_ON,SHIFT_MASK,SHIFT_ON,SHIFT_RIGHT_ON,SYM_ON\n",
        "params": [{"name":"obj: appobject","desc":"","type":"appobject"},{"name":"keyName: string","desc":"","type":"string"},{"name":"modifiers: string","desc":"META_META_ON,META_RIGHT_ON,NUM_LOCK_ON,SCROLL_LOCK_ON,SHIFT_LEFT_ON,SHIFT_MASK,SHIFT_ON,SHIFT_RIGHT_ON,SYM_ON","type":"string"},{"name":"pause: number","desc":"META_META_ON,META_RIGHT_ON,NUM_LOCK_ON,SCROLL_LOCK_ON,SHIFT_LEFT_ON,SHIFT_MASK,SHIFT_ON,SHIFT_RIGHT_ON,SYM_ON","type":"number"}],
        "call": "app.SimulateKey(obj: appobject, keyName: string, modifiers: string, pause: number)"
    },
    {
        "name": "SimulateScroll",
        "kind": "Method",
        "detail": "SimulateScroll: (obj: appobject, x: number, y: number, dx: number, dy: number, count: number, fling: number)",
        "doc": "Simulates a scroll event on a scrollable app object",
        "param": "\n*@param* {appobject} `obj` - \n\n*@param* {number} `x` - Number fraction (0..1)\n\n*@param* {number} `y` - Number fraction (0..1)\n\n*@param* {number} `dx` - Number fraction (0..1)\n\n*@param* {number} `dy` - Number fraction (0..1)\n\n*@param* {number} `count` - Number fraction (0..1)\n\n*@param* {number} `fling` - Number fraction (0..1)\n",
        "params": [{"name":"obj: appobject","desc":"","type":"appobject"},{"name":"x: number","desc":"Number fraction (0..1)","type":"number"},{"name":"y: number","desc":"Number fraction (0..1)","type":"number"},{"name":"dx: number","desc":"Number fraction (0..1)","type":"number"},{"name":"dy: number","desc":"Number fraction (0..1)","type":"number"},{"name":"count: number","desc":"Number fraction (0..1)","type":"number"},{"name":"fling: number","desc":"Number fraction (0..1)","type":"number"}],
        "call": "app.SimulateScroll(obj: appobject, x: number, y: number, dx: number, dy: number, count: number, fling: number)"
    },
    {
        "name": "SimulateTouch",
        "kind": "Method",
        "detail": "SimulateTouch: (obj: appobject, x: number, y: number, dir: string)",
        "doc": "Simulates a touch event on a rouchable control",
        "param": "\n*@param* {appobject} `obj` - \n\n*@param* {number} `x` - Number fraction (0..1)\n\n*@param* {number} `y` - Number fraction (0..1)\n\n*@param* {string} `dir` - Down|Move|Up\n",
        "params": [{"name":"obj: appobject","desc":"","type":"appobject"},{"name":"x: number","desc":"Number fraction (0..1)","type":"number"},{"name":"y: number","desc":"Number fraction (0..1)","type":"number"},{"name":"dir: string","desc":"Down|Move|Up","type":"string"}],
        "call": "app.SimulateTouch(obj: appobject, x: number, y: number, dir: string)"
    },
    {
        "name": "Start",
        "kind": "Method",
        "detail": "Start: ()",
        "doc": "Starts your DS app in an html project. Call it in the document.onload function in order to initialize DroidScript and execute your OnStart() function",
        "param": "",
        "params": [],
        "call": "app.Start()"
    },
    {
        "name": "StartApp",
        "kind": "Method",
        "detail": "StartApp: (file: string, options: string, intent: string)",
        "doc": "Starts an app in a new window. **Note:** This function does only work in APKs because in the IDE your app is already running.",
        "param": "\n*@param* {string} `file` - String path to file ( “/absolute/...” or “relative/...” )\n\n*@param* {string} `options` - String comma “,” separated Portrait|Landscape,Transparent,Debug:start app in debug mode,Game:runs in GameView mode|remote\n\n*@param* {string} `intent` - { action:str&comma; type:str&comma; data:obj&comma; extras:obj }\n",
        "params": [{"name":"file: string","desc":"String path to file ( “/absolute/...” or “relative/...” )","type":"string"},{"name":"options: string","desc":"String comma “,” separated Portrait|Landscape,Transparent,Debug:start app in debug mode,Game:runs in GameView mode|remote","type":"string"},{"name":"intent: string","desc":"{ action:str&comma; type:str&comma; data:obj&comma; extras:obj }","type":"string"}],
        "call": "app.StartApp(file: string, options: string, intent: string)"
    },
    {
        "name": "StartDebugServer",
        "kind": "Method",
        "detail": "StartDebugServer: ()",
        "doc": "Starts a debug server which can be used to debug your app on headless devices.",
        "param": "",
        "params": [],
        "call": "app.StartDebugServer()"
    },
    {
        "name": "StartService",
        "kind": "Method",
        "detail": "StartService: (packageName: string, className: string)",
        "doc": "Starts a service which runs parallel to your app.",
        "param": "\n*@param* {string} `packageName` - \n\n*@param* {string} `className` - \n",
        "params": [{"name":"packageName: string","desc":"","type":"string"},{"name":"className: string","desc":"","type":"string"}],
        "call": "app.StartService(packageName: string, className: string)"
    },
    {
        "name": "StopApp",
        "kind": "Method",
        "detail": "StopApp: (name: string)",
        "doc": "Stops an app started via @StartApp",
        "param": "\n*@param* {string} `name` - String path to file or folder ( “/absolute/...” or “relative/...” )\n",
        "params": [{"name":"name: string","desc":"String path to file or folder ( “/absolute/...” or “relative/...” )","type":"string"}],
        "call": "app.StopApp(name: string)"
    },
    {
        "name": "StopDebugServer",
        "kind": "Method",
        "detail": "StopDebugServer: ()",
        "doc": "Stops a running debug server.",
        "param": "",
        "params": [],
        "call": "app.StopDebugServer()"
    },
    {
        "name": "StopService",
        "kind": "Method",
        "detail": "StopService: ()",
        "doc": "Stops a service started via @StartService",
        "param": "",
        "params": [],
        "call": "app.StopService()"
    },
    {
        "name": "SysExec",
        "kind": "Method",
        "detail": "SysExec: (command: string, options: string, maxRead: number, timeout: number)",
        "doc": "Executes a shell command on the android shell. **NOTE:** You have to add a '`exit`' command at the end of your script because the shell does not terminate automatically after finishing.",
        "param": "\n*@param* {string} `command` - \n\n*@param* {string} `options` - log:logs output to console,noread:dont read result (just execute),sh|su\n\n*@param* {number} `maxRead` - log:logs output to console,noread:dont read result (just execute),sh|su\n\n*@param* {number} `timeout` - Number seconds\n",
        "params": [{"name":"command: string","desc":"","type":"string"},{"name":"options: string","desc":"log:logs output to console,noread:dont read result (just execute),sh|su","type":"string"},{"name":"maxRead: number","desc":"log:logs output to console,noread:dont read result (just execute),sh|su","type":"number"},{"name":"timeout: number","desc":"Number seconds","type":"number"}],
        "call": "app.SysExec(command: string, options: string, maxRead: number, timeout: number)"
    },
    {
        "name": "TextToSpeech",
        "kind": "Method",
        "detail": "TextToSpeech: (text: string, pitch: number, rate: number, callback: function, stream: string, locale: string, engine: string)",
        "doc": "Uses the android TextToSpeech engine to play text acoustically. You can use different locales depending on the user language. A list of languages and their locales (LCID string) can be found on [www.science.co.il](https://www.science.co.il/language/Locale-codes.php)",
        "param": "\n*@param* {string} `text` - \n\n*@param* {number} `pitch` - \n\n*@param* {number} `rate` - \n\n*@param* {function} `callback` - \n\n*@param* {string} `stream` - music\n\n*@param* {string} `locale` - music\n\n*@param* {string} `engine` - music\n",
        "params": [{"name":"text: string","desc":"","type":"string"},{"name":"pitch: number","desc":"","type":"number"},{"name":"rate: number","desc":"","type":"number"},{"name":"callback: function","desc":"","type":"function"},{"name":"stream: string","desc":"music","type":"string"},{"name":"locale: string","desc":"music","type":"string"},{"name":"engine: string","desc":"music","type":"string"}],
        "call": "app.TextToSpeech(text: string, pitch: number, rate: number, callback: function, stream: string, locale: string, engine: string)"
    },
    {
        "name": "ToBack",
        "kind": "Method",
        "detail": "ToBack: ()",
        "doc": "Hides the app but continue running it in the background. If called, the global _OnPause_ event will be fired and if reshown, _OnResume_ is fired.",
        "param": "",
        "params": [],
        "call": "app.ToBack()"
    },
    {
        "name": "ToFront",
        "kind": "Method",
        "detail": "ToFront: ()",
        "doc": "Brings the app back to the foreground.",
        "param": "",
        "params": [],
        "call": "app.ToFront()"
    },
    {
        "name": "Translate",
        "kind": "Method",
        "detail": "Translate: (Ok: string, Cancel: string)",
        "doc": "Translates “Ok” and “Cancel” buttons created after this method to the passed strings",
        "param": "\n*@param* {string} `Ok` - \n\n*@param* {string} `Cancel` - \n",
        "params": [{"name":"Ok: string","desc":"","type":"string"},{"name":"Cancel: string","desc":"","type":"string"}],
        "call": "app.Translate(Ok: string, Cancel: string)"
    },
    {
        "name": "Unlock",
        "kind": "Method",
        "detail": "Unlock: ()",
        "doc": "Unlocks the device.",
        "param": "",
        "params": [],
        "call": "app.Unlock()"
    },
    {
        "name": "UnlockDrawer",
        "kind": "Method",
        "detail": "UnlockDrawer: (side: string)",
        "doc": "Unlocks a locked drawer.",
        "param": "\n*@param* {string} `side` - left|right\n",
        "params": [{"name":"side: string","desc":"left|right","type":"string"}],
        "call": "app.UnlockDrawer(side: string)"
    },
    {
        "name": "UnpairBtDevice",
        "kind": "Method",
        "detail": "UnpairBtDevice: (address: string, callback: function)",
        "doc": "Unpairs a paired Bluetooth device by its bt address. The _callback_ argument is called when the device was successfully unpaired.",
        "param": "\n*@param* {string} `address` - \n\n*@param* {function} `callback` - \n",
        "params": [{"name":"address: string","desc":"","type":"string"},{"name":"callback: function","desc":"","type":"function"}],
        "call": "app.UnpairBtDevice(address: string, callback: function)"
    },
    {
        "name": "UnzipFile",
        "kind": "Method",
        "detail": "UnzipFile: (source: string, destination: string)",
        "doc": "Extracts the contents of a zip file to a given target folder.",
        "param": "\n*@param* {string} `source` - String path to file or folder ( “/absolute/...” or “relative/...” )\n\n*@param* {string} `destination` - String path to file or folder ( “/absolute/...” or “relative/...” )\n",
        "params": [{"name":"source: string","desc":"String path to file or folder ( “/absolute/...” or “relative/...” )","type":"string"},{"name":"destination: string","desc":"String path to file or folder ( “/absolute/...” or “relative/...” )","type":"string"}],
        "call": "app.UnzipFile(source: string, destination: string)"
    },
    {
        "name": "UpdateProgressBar",
        "kind": "Method",
        "detail": "UpdateProgressBar: (percent: number)",
        "doc": "Updates the progress percentage of a ProgressBar.",
        "param": "\n*@param* {number} `percent` - Number percent\n",
        "params": [{"name":"percent: number","desc":"Number percent","type":"number"}],
        "call": "app.UpdateProgressBar(percent: number)"
    },
    {
        "name": "UpdateUI",
        "kind": "Method",
        "detail": "UpdateUI: (ms: number)",
        "doc": "Force an UI refresh during a very time consuming calculation",
        "param": "\n*@param* {number} `ms` - Number milliseconds rate\n",
        "params": [{"name":"ms: number","desc":"Number milliseconds rate","type":"number"}],
        "call": "app.UpdateUI(ms: number)"
    },
    {
        "name": "UploadFile",
        "kind": "Method",
        "detail": "UploadFile: (url: string, file: string, name: string, callback: function)",
        "doc": "Uploads a file to a server",
        "param": "\n*@param* {string} `url` - String url path\n\n*@param* {string} `file` - String path to file ( “/absolute/...” or “relative/...” )\n\n*@param* {string} `name` - String path to file ( “/absolute/...” or “relative/...” )\n\n*@param* {function} `callback` - String path to file ( “/absolute/...” or “relative/...” )\n",
        "params": [{"name":"url: string","desc":"String url path","type":"string"},{"name":"file: string","desc":"String path to file ( “/absolute/...” or “relative/...” )","type":"string"},{"name":"name: string","desc":"String path to file ( “/absolute/...” or “relative/...” )","type":"string"},{"name":"callback: function","desc":"String path to file ( “/absolute/...” or “relative/...” )","type":"function"}],
        "call": "app.UploadFile(url: string, file: string, name: string, callback: function)"
    },
    {
        "name": "Uri2Path",
        "kind": "Method",
        "detail": "Uri2Path: (uri: string, options: )",
        "doc": "Decodes a URI encoded string.",
        "param": "\n*@param* {string} `uri` - String URI encoded\n\n*@param* {} `options` - returns DS style paths\n",
        "params": [{"name":"uri: string","desc":"String URI encoded","type":"string"},{"name":"options: ","desc":"returns DS style paths","type":""}],
        "call": "app.Uri2Path(uri: string, options: )"
    },
    {
        "name": "Vibrate",
        "kind": "Method",
        "detail": "Vibrate: (pattern: string)",
        "doc": "Makes the device vibrate in a specified pattern in millisecond values:",
        "param": "\n*@param* {string} `pattern` - String comma “,” separated\n",
        "params": [{"name":"pattern: string","desc":"String comma “,” separated","type":"string"}],
        "call": "app.Vibrate(pattern: string)"
    },
    {
        "name": "Wait",
        "kind": "Method",
        "detail": "Wait: (seconds: number)",
        "doc": "Performs a **synchronous** delay in your program which effectively pauses it",
        "param": "\n*@param* {number} `seconds` - Number seconds\n",
        "params": [{"name":"seconds: number","desc":"Number seconds","type":"number"}],
        "call": "app.Wait(seconds: number)"
    },
    {
        "name": "WakeUp",
        "kind": "Method",
        "detail": "WakeUp: ()",
        "doc": "Forces the screen to turn on the screen. (This has the same effect as pressing the power button in sleep mode)",
        "param": "",
        "params": [],
        "call": "app.WakeUp()"
    },
    {
        "name": "WalkFolder",
        "kind": "Method",
        "detail": "WalkFolder: (path: string, filter: string, limit: number, options: string)",
        "doc": "Lists a directory recursively similar to app.@ListFolde",
        "param": "\n*@param* {string} `path` - String path to file or folder ( “/absolute/...” or “relative/...” )\n\n*@param* {string} `filter` - String path to file or folder ( “/absolute/...” or “relative/...” )\n\n*@param* {number} `limit` - Number integer\n\n*@param* {string} `options` - String comma “,” separated Alphasort:sorts the paths in alphabetical order,FullPath:returns absolute paths to the listed items,RegEx:accepts regexp patterns,Folders:list folders only,Files:list files only,NoEmpty:hide empty folders,project:Shows DS project folders only\n",
        "params": [{"name":"path: string","desc":"String path to file or folder ( “/absolute/...” or “relative/...” )","type":"string"},{"name":"filter: string","desc":"String path to file or folder ( “/absolute/...” or “relative/...” )","type":"string"},{"name":"limit: number","desc":"Number integer","type":"number"},{"name":"options: string","desc":"String comma “,” separated Alphasort:sorts the paths in alphabetical order,FullPath:returns absolute paths to the listed items,RegEx:accepts regexp patterns,Folders:list folders only,Files:list files only,NoEmpty:hide empty folders,project:Shows DS project folders only","type":"string"}],
        "call": "app.WalkFolder(path: string, filter: string, limit: number, options: string)"
    },
    {
        "name": "WifiConnect",
        "kind": "Method",
        "detail": "WifiConnect: (ssid: string, key: string)",
        "doc": "Connect to a WiFi network by specifying the ssid and a password. See Also: @WifiScan, @SetOnWifiChange, @SetWifiApEnable",
        "param": "\n*@param* {string} `ssid` - \n\n*@param* {string} `key` - \n",
        "params": [{"name":"ssid: string","desc":"","type":"string"},{"name":"key: string","desc":"","type":"string"}],
        "call": "app.WifiConnect(ssid: string, key: string)"
    },
    {
        "name": "WifiScan",
        "kind": "Method",
        "detail": "WifiScan: (callback: function, options: string)",
        "doc": "Scans the surroundings for any available Wifi networks",
        "param": "\n*@param* {function} `callback` - \n\n*@param* {string} `options` - detail\n",
        "params": [{"name":"callback: function","desc":"","type":"function"},{"name":"options: string","desc":"detail","type":"string"}],
        "call": "app.WifiScan(callback: function, options: string)"
    },
    {
        "name": "WriteFile",
        "kind": "Method",
        "detail": "WriteFile: (file: string, text: string, mode: string, encoding: string)",
        "doc": "Writes text to a local file.",
        "param": "\n*@param* {string} `file` - String path to file ( “/absolute/...” or “relative/...” )\n\n*@param* {string} `text` - String path to file ( “/absolute/...” or “relative/...” )\n\n*@param* {string} `mode` - Append|ASCII\n\n*@param* {string} `encoding` - US-ASCII|UTF-8|UTF-16|UTF-16BE|UTF-16LE|windows-1252|ISO-8859-1:Latin-1\n",
        "params": [{"name":"file: string","desc":"String path to file ( “/absolute/...” or “relative/...” )","type":"string"},{"name":"text: string","desc":"String path to file ( “/absolute/...” or “relative/...” )","type":"string"},{"name":"mode: string","desc":"Append|ASCII","type":"string"},{"name":"encoding: string","desc":"US-ASCII|UTF-8|UTF-16|UTF-16BE|UTF-16LE|windows-1252|ISO-8859-1:Latin-1","type":"string"}],
        "call": "app.WriteFile(file: string, text: string, mode: string, encoding: string)"
    },
    {
        "name": "ZipFile",
        "kind": "Method",
        "detail": "ZipFile: (source: string, destination: string)",
        "doc": "Compresses a local file to a zip file.",
        "param": "\n*@param* {string} `source` - String path to file or folder ( “/absolute/...” or “relative/...” )\n\n*@param* {string} `destination` - String path to file or folder ( “/absolute/...” or “relative/...” )\n",
        "params": [{"name":"source: string","desc":"String path to file or folder ( “/absolute/...” or “relative/...” )","type":"string"},{"name":"destination: string","desc":"String path to file or folder ( “/absolute/...” or “relative/...” )","type":"string"}],
        "call": "app.ZipFile(source: string, destination: string)"
    },
    {
        "name": "ZipFolder",
        "kind": "Method",
        "detail": "ZipFolder: (source: string, destination: string)",
        "doc": "Recursively compresses a local folder to a zip file.",
        "param": "\n*@param* {string} `source` - String path to file or folder ( “/absolute/...” or “relative/...” )\n\n*@param* {string} `destination` - String path to file or folder ( “/absolute/...” or “relative/...” )\n",
        "params": [{"name":"source: string","desc":"String path to file or folder ( “/absolute/...” or “relative/...” )","type":"string"},{"name":"destination: string","desc":"String path to file or folder ( “/absolute/...” or “relative/...” )","type":"string"}],
        "call": "app.ZipFolder(source: string, destination: string)"
    }
]}